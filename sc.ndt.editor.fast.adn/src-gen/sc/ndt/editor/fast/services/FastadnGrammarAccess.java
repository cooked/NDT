/*
* generated by Xtext
*/
package sc.ndt.editor.fast.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class FastadnGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelFastadnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelFastadn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadHeaderParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cSIUnitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSIUnitsSUnitsParserRuleCall_1_0 = (RuleCall)cSIUnitsAssignment_1.eContents().get(0);
		private final Assignment cStallModAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStallModSStallModParserRuleCall_2_0 = (RuleCall)cStallModAssignment_2.eContents().get(0);
		private final Assignment cUseCmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUseCmSUseCmParserRuleCall_3_0 = (RuleCall)cUseCmAssignment_3.eContents().get(0);
		private final Assignment cInfModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInfModelSInfModelParserRuleCall_4_0 = (RuleCall)cInfModelAssignment_4.eContents().get(0);
		private final Assignment cIndModelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIndModelSIndModelParserRuleCall_5_0 = (RuleCall)cIndModelAssignment_5.eContents().get(0);
		private final Assignment cAtolerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAtolerNAtolerParserRuleCall_6_0 = (RuleCall)cAtolerAssignment_6.eContents().get(0);
		private final Assignment cTLModelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTLModelSTLModelParserRuleCall_7_0 = (RuleCall)cTLModelAssignment_7.eContents().get(0);
		private final Assignment cHLModelAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHLModelSHLModelParserRuleCall_8_0 = (RuleCall)cHLModelAssignment_8.eContents().get(0);
		private final Assignment cWindFileAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cWindFileFWindFileParserRuleCall_9_0 = (RuleCall)cWindFileAssignment_9.eContents().get(0);
		private final Assignment cHHAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHHNHHParserRuleCall_10_0 = (RuleCall)cHHAssignment_10.eContents().get(0);
		private final Assignment cTwrShadAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cTwrShadNTwrShadParserRuleCall_11_0 = (RuleCall)cTwrShadAssignment_11.eContents().get(0);
		private final Assignment cShadHWidAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cShadHWidNShadHWidParserRuleCall_12_0 = (RuleCall)cShadHWidAssignment_12.eContents().get(0);
		private final Assignment cTShadRefPtAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTShadRefPtNTShadRefPtParserRuleCall_13_0 = (RuleCall)cTShadRefPtAssignment_13.eContents().get(0);
		private final Assignment cRhoAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cRhoNRhoParserRuleCall_14_0 = (RuleCall)cRhoAssignment_14.eContents().get(0);
		private final Assignment cKinViscAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cKinViscNKinViscParserRuleCall_15_0 = (RuleCall)cKinViscAssignment_15.eContents().get(0);
		private final Assignment cDTAeroAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cDTAeroNDTAeroParserRuleCall_16_0 = (RuleCall)cDTAeroAssignment_16.eContents().get(0);
		private final Assignment cNumFoilAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cNumFoilINumFoilParserRuleCall_17_0 = (RuleCall)cNumFoilAssignment_17.eContents().get(0);
		private final Assignment cFoilNmAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cFoilNmAAirfoilListParserRuleCall_18_0 = (RuleCall)cFoilNmAssignment_18.eContents().get(0);
		private final Assignment cBldNodesAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cBldNodesIBldNodesParserRuleCall_19_0 = (RuleCall)cBldNodesAssignment_19.eContents().get(0);
		private final Assignment cAirStatAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cAirStatAAirStatParserRuleCall_20_0 = (RuleCall)cAirStatAssignment_20.eContents().get(0);
		private final Alternatives cAlternatives_21 = (Alternatives)cGroup.eContents().get(21);
		private final RuleCall cWSTerminalRuleCall_21_0 = (RuleCall)cAlternatives_21.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_21_1 = (RuleCall)cAlternatives_21.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_21_2 = (RuleCall)cAlternatives_21.eContents().get(2);
		
		//// about EOF
		//// http://www.euclideanspace.com/software/development/eclipse/xtext/grammar/lexer/index.htm
		//ModelFastadn:
		//	Head=Header SIUnits=sUnits StallMod=sStallMod UseCm=sUseCm InfModel=sInfModel IndModel=sIndModel Atoler=nAtoler
		//	TLModel=sTLModel HLModel=sHLModel WindFile=fWindFile HH=nHH TwrShad=nTwrShad ShadHWid=nShadHWid TShadRefPt=nTShadRefPt
		//	Rho= // Air density (kg/m^3)						
		//	nRho KinVisc= // Kinematic air viscosity [MUST !=0 FOR NOISE]						(m^2/sec)						
		//	nKinVisc DTAero= // Time interval for aerodynamic calculations						(sec)
		//	nDTAero NumFoil= // Number of airfoil files (-)
		//	iNumFoil FoilNm= // Names of the airfoil files [NumFoil lines]					(quoted strings)
		//	aAirfoilList BldNodes=iBldNodes AirStat=aAirStat (WS | NEWLINE | SL_COMMENT)*;
		public ParserRule getRule() { return rule; }

		//Head=Header SIUnits=sUnits StallMod=sStallMod UseCm=sUseCm InfModel=sInfModel IndModel=sIndModel Atoler=nAtoler
		//TLModel=sTLModel HLModel=sHLModel WindFile=fWindFile HH=nHH TwrShad=nTwrShad ShadHWid=nShadHWid TShadRefPt=nTShadRefPt
		//Rho= // Air density (kg/m^3)						
		//nRho KinVisc= // Kinematic air viscosity [MUST !=0 FOR NOISE]						(m^2/sec)						
		//nKinVisc DTAero= // Time interval for aerodynamic calculations						(sec)
		//nDTAero NumFoil= // Number of airfoil files (-)
		//iNumFoil FoilNm= // Names of the airfoil files [NumFoil lines]					(quoted strings)
		//aAirfoilList BldNodes=iBldNodes AirStat=aAirStat (WS | NEWLINE | SL_COMMENT)*
		public Group getGroup() { return cGroup; }

		//Head=Header
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//Header
		public RuleCall getHeadHeaderParserRuleCall_0_0() { return cHeadHeaderParserRuleCall_0_0; }

		//SIUnits=sUnits
		public Assignment getSIUnitsAssignment_1() { return cSIUnitsAssignment_1; }

		//sUnits
		public RuleCall getSIUnitsSUnitsParserRuleCall_1_0() { return cSIUnitsSUnitsParserRuleCall_1_0; }

		//StallMod=sStallMod
		public Assignment getStallModAssignment_2() { return cStallModAssignment_2; }

		//sStallMod
		public RuleCall getStallModSStallModParserRuleCall_2_0() { return cStallModSStallModParserRuleCall_2_0; }

		//UseCm=sUseCm
		public Assignment getUseCmAssignment_3() { return cUseCmAssignment_3; }

		//sUseCm
		public RuleCall getUseCmSUseCmParserRuleCall_3_0() { return cUseCmSUseCmParserRuleCall_3_0; }

		//InfModel=sInfModel
		public Assignment getInfModelAssignment_4() { return cInfModelAssignment_4; }

		//sInfModel
		public RuleCall getInfModelSInfModelParserRuleCall_4_0() { return cInfModelSInfModelParserRuleCall_4_0; }

		//IndModel=sIndModel
		public Assignment getIndModelAssignment_5() { return cIndModelAssignment_5; }

		//sIndModel
		public RuleCall getIndModelSIndModelParserRuleCall_5_0() { return cIndModelSIndModelParserRuleCall_5_0; }

		//Atoler=nAtoler
		public Assignment getAtolerAssignment_6() { return cAtolerAssignment_6; }

		//nAtoler
		public RuleCall getAtolerNAtolerParserRuleCall_6_0() { return cAtolerNAtolerParserRuleCall_6_0; }

		//TLModel=sTLModel
		public Assignment getTLModelAssignment_7() { return cTLModelAssignment_7; }

		//sTLModel
		public RuleCall getTLModelSTLModelParserRuleCall_7_0() { return cTLModelSTLModelParserRuleCall_7_0; }

		//HLModel=sHLModel
		public Assignment getHLModelAssignment_8() { return cHLModelAssignment_8; }

		//sHLModel
		public RuleCall getHLModelSHLModelParserRuleCall_8_0() { return cHLModelSHLModelParserRuleCall_8_0; }

		//WindFile=fWindFile
		public Assignment getWindFileAssignment_9() { return cWindFileAssignment_9; }

		//fWindFile
		public RuleCall getWindFileFWindFileParserRuleCall_9_0() { return cWindFileFWindFileParserRuleCall_9_0; }

		//HH=nHH
		public Assignment getHHAssignment_10() { return cHHAssignment_10; }

		//nHH
		public RuleCall getHHNHHParserRuleCall_10_0() { return cHHNHHParserRuleCall_10_0; }

		//TwrShad=nTwrShad
		public Assignment getTwrShadAssignment_11() { return cTwrShadAssignment_11; }

		//nTwrShad
		public RuleCall getTwrShadNTwrShadParserRuleCall_11_0() { return cTwrShadNTwrShadParserRuleCall_11_0; }

		//ShadHWid=nShadHWid
		public Assignment getShadHWidAssignment_12() { return cShadHWidAssignment_12; }

		//nShadHWid
		public RuleCall getShadHWidNShadHWidParserRuleCall_12_0() { return cShadHWidNShadHWidParserRuleCall_12_0; }

		//TShadRefPt=nTShadRefPt
		public Assignment getTShadRefPtAssignment_13() { return cTShadRefPtAssignment_13; }

		//nTShadRefPt
		public RuleCall getTShadRefPtNTShadRefPtParserRuleCall_13_0() { return cTShadRefPtNTShadRefPtParserRuleCall_13_0; }

		//Rho= // Air density (kg/m^3)						
		//nRho
		public Assignment getRhoAssignment_14() { return cRhoAssignment_14; }

		//// Air density (kg/m^3)						
		//nRho
		public RuleCall getRhoNRhoParserRuleCall_14_0() { return cRhoNRhoParserRuleCall_14_0; }

		//KinVisc= // Kinematic air viscosity [MUST !=0 FOR NOISE]						(m^2/sec)						
		//nKinVisc
		public Assignment getKinViscAssignment_15() { return cKinViscAssignment_15; }

		//// Kinematic air viscosity [MUST !=0 FOR NOISE]						(m^2/sec)						
		//nKinVisc
		public RuleCall getKinViscNKinViscParserRuleCall_15_0() { return cKinViscNKinViscParserRuleCall_15_0; }

		//DTAero= // Time interval for aerodynamic calculations						(sec)
		//nDTAero
		public Assignment getDTAeroAssignment_16() { return cDTAeroAssignment_16; }

		//// Time interval for aerodynamic calculations						(sec)
		//nDTAero
		public RuleCall getDTAeroNDTAeroParserRuleCall_16_0() { return cDTAeroNDTAeroParserRuleCall_16_0; }

		//NumFoil= // Number of airfoil files (-)
		//iNumFoil
		public Assignment getNumFoilAssignment_17() { return cNumFoilAssignment_17; }

		//// Number of airfoil files (-)
		//iNumFoil
		public RuleCall getNumFoilINumFoilParserRuleCall_17_0() { return cNumFoilINumFoilParserRuleCall_17_0; }

		//FoilNm= // Names of the airfoil files [NumFoil lines]					(quoted strings)
		//aAirfoilList
		public Assignment getFoilNmAssignment_18() { return cFoilNmAssignment_18; }

		//// Names of the airfoil files [NumFoil lines]					(quoted strings)
		//aAirfoilList
		public RuleCall getFoilNmAAirfoilListParserRuleCall_18_0() { return cFoilNmAAirfoilListParserRuleCall_18_0; }

		//BldNodes=iBldNodes
		public Assignment getBldNodesAssignment_19() { return cBldNodesAssignment_19; }

		//iBldNodes
		public RuleCall getBldNodesIBldNodesParserRuleCall_19_0() { return cBldNodesIBldNodesParserRuleCall_19_0; }

		//AirStat=aAirStat
		public Assignment getAirStatAssignment_20() { return cAirStatAssignment_20; }

		//aAirStat
		public RuleCall getAirStatAAirStatParserRuleCall_20_0() { return cAirStatAAirStatParserRuleCall_20_0; }

		//(WS | NEWLINE | SL_COMMENT)*
		public Alternatives getAlternatives_21() { return cAlternatives_21; }

		//WS
		public RuleCall getWSTerminalRuleCall_21_0() { return cWSTerminalRuleCall_21_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_21_1() { return cNEWLINETerminalRuleCall_21_1; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_21_2() { return cSL_COMMENTTerminalRuleCall_21_2; }
	}

	public class TNUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tNUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//tNUMBER returns ecore::EFloat:
		//	INT | NUMBER;
		public ParserRule getRule() { return rule; }

		//INT | NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}

	public class TARRAY_STRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tARRAY_STR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////from online help: The QualifiedName is a little special. It does not contain any assignments. 
		//// Therefore, it serves as a data type rule, which returns a String. So the feature name of a 
		//// Package is still of type String. 
		////FILE: ('.'?'.'?)('/'? STRING)*;
		////FILE returns ecore::EString:
		////	'"' ((('.'|'..')? '/')? (NAME '/')* NAME'.'NAME)? '"';
		//tARRAY_STR returns ecore::EString hidden(SL_COMMENT):
		//	(WS? STRING WS? NEWLINE)*;
		public ParserRule getRule() { return rule; }

		//(WS? STRING WS? NEWLINE)*
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_3() { return cNEWLINETerminalRuleCall_3; }
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Header hidden():
		//	name=SL_COMMENT NEWLINE;
		public ParserRule getRule() { return rule; }

		//name=SL_COMMENT NEWLINE
		public Group getGroup() { return cGroup; }

		//name=SL_COMMENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SL_COMMENT
		public RuleCall getNameSL_COMMENTTerminalRuleCall_0_0() { return cNameSL_COMMENTTerminalRuleCall_0_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
	}

	public class SUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sUnits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueUNITSTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameSysUnitsKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//sUnits hidden():
		//	WS? value=UNITS WS name="SysUnits" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=UNITS WS name="SysUnits" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=UNITS
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//UNITS
		public RuleCall getValueUNITSTerminalRuleCall_1_0() { return cValueUNITSTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="SysUnits"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"SysUnits"
		public Keyword getNameSysUnitsKeyword_3_0() { return cNameSysUnitsKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class SStallModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sStallMod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTALLTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameStallModKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//sStallMod hidden():
		//	WS? value=STALL WS name="StallMod" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=STALL WS name="StallMod" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=STALL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STALL
		public RuleCall getValueSTALLTerminalRuleCall_1_0() { return cValueSTALLTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="StallMod"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"StallMod"
		public Keyword getNameStallModKeyword_3_0() { return cNameStallModKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class SUseCmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sUseCm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCMTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameUseCmKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//sUseCm hidden():
		//	WS? value=CM WS name="UseCm" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=CM WS name="UseCm" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=CM
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//CM
		public RuleCall getValueCMTerminalRuleCall_1_0() { return cValueCMTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="UseCm"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"UseCm"
		public Keyword getNameUseCmKeyword_3_0() { return cNameUseCmKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class SInfModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sInfModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINFMODELTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameInfModelKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//sInfModel hidden():
		//	WS? value=INFMODEL WS name="InfModel" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=INFMODEL WS name="InfModel" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=INFMODEL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INFMODEL
		public RuleCall getValueINFMODELTerminalRuleCall_1_0() { return cValueINFMODELTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="InfModel"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"InfModel"
		public Keyword getNameInfModelKeyword_3_0() { return cNameInfModelKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class SIndModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sIndModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINDMODELTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameIndModelKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//sIndModel hidden():
		//	WS? value=INDMODEL WS name="IndModel" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=INDMODEL WS name="IndModel" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=INDMODEL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INDMODEL
		public RuleCall getValueINDMODELTerminalRuleCall_1_0() { return cValueINDMODELTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="IndModel"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"IndModel"
		public Keyword getNameIndModelKeyword_3_0() { return cNameIndModelKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NAtolerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nAtoler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cNameAlternatives_3_0 = (Alternatives)cNameAssignment_3.eContents().get(0);
		private final Keyword cNameAtolerKeyword_3_0_0 = (Keyword)cNameAlternatives_3_0.eContents().get(0);
		private final Keyword cNameATolerKeyword_3_0_1 = (Keyword)cNameAlternatives_3_0.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nAtoler hidden():
		//	WS? value=tNUMBER WS name=("Atoler" | "AToler") WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name=("Atoler" | "AToler") WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name=("Atoler" | "AToler")
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"Atoler" | "AToler"
		public Alternatives getNameAlternatives_3_0() { return cNameAlternatives_3_0; }

		//"Atoler"
		public Keyword getNameAtolerKeyword_3_0_0() { return cNameAtolerKeyword_3_0_0; }

		//"AToler"
		public Keyword getNameATolerKeyword_3_0_1() { return cNameATolerKeyword_3_0_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class STLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sTLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuePRANDTLTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameTLModelKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//sTLModel hidden():
		//	WS? value=PRANDTL WS name="TLModel" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=PRANDTL WS name="TLModel" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=PRANDTL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//PRANDTL
		public RuleCall getValuePRANDTLTerminalRuleCall_1_0() { return cValuePRANDTLTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="TLModel"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"TLModel"
		public Keyword getNameTLModelKeyword_3_0() { return cNameTLModelKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class SHLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sHLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuePRANDTLTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameHLModelKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//sHLModel hidden():
		//	WS? value=PRANDTL WS name="HLModel" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=PRANDTL WS name="HLModel" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=PRANDTL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//PRANDTL
		public RuleCall getValuePRANDTLTerminalRuleCall_1_0() { return cValuePRANDTLTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="HLModel"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"HLModel"
		public Keyword getNameHLModelKeyword_3_0() { return cNameHLModelKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class FWindFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fWindFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameWindFileKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//fWindFile hidden():
		//	WS? value=STRING WS name="WindFile" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=STRING WS name="WindFile" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="WindFile"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"WindFile"
		public Keyword getNameWindFileKeyword_3_0() { return cNameWindFileKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NHHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nHH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameHHKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nHH hidden():
		//	WS? value=tNUMBER WS name="HH" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name="HH" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="HH"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"HH"
		public Keyword getNameHHKeyword_3_0() { return cNameHHKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NTwrShadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nTwrShad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameTwrShadKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nTwrShad hidden():
		//	WS? value=tNUMBER WS name="TwrShad" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name="TwrShad" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="TwrShad"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"TwrShad"
		public Keyword getNameTwrShadKeyword_3_0() { return cNameTwrShadKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NShadHWidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nShadHWid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameShadHWidKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nShadHWid hidden():
		//	WS? value=tNUMBER WS name="ShadHWid" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name="ShadHWid" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="ShadHWid"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"ShadHWid"
		public Keyword getNameShadHWidKeyword_3_0() { return cNameShadHWidKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NTShadRefPtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nTShadRefPt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameT_Shad_RefptKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nTShadRefPt hidden():
		//	WS? value=tNUMBER WS name="T_Shad_Refpt" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name="T_Shad_Refpt" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="T_Shad_Refpt"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"T_Shad_Refpt"
		public Keyword getNameT_Shad_RefptKeyword_3_0() { return cNameT_Shad_RefptKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NRhoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nRho");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cNameAlternatives_3_0 = (Alternatives)cNameAssignment_3.eContents().get(0);
		private final Keyword cNameRhoKeyword_3_0_0 = (Keyword)cNameAlternatives_3_0.eContents().get(0);
		private final Keyword cNameAirDensKeyword_3_0_1 = (Keyword)cNameAlternatives_3_0.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nRho hidden():
		//	WS? value=tNUMBER WS name=("Rho" | "AirDens") WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name=("Rho" | "AirDens") WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name=("Rho" | "AirDens")
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"Rho" | "AirDens"
		public Alternatives getNameAlternatives_3_0() { return cNameAlternatives_3_0; }

		//"Rho"
		public Keyword getNameRhoKeyword_3_0_0() { return cNameRhoKeyword_3_0_0; }

		//"AirDens"
		public Keyword getNameAirDensKeyword_3_0_1() { return cNameAirDensKeyword_3_0_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NKinViscElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nKinVisc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameKinViscKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nKinVisc hidden():
		//	WS? value=tNUMBER WS name="KinVisc" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name="KinVisc" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="KinVisc"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"KinVisc"
		public Keyword getNameKinViscKeyword_3_0() { return cNameKinViscKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class NDTAeroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nDTAero");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameDTAeroKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//nDTAero hidden():
		//	WS? value=tNUMBER WS name="DTAero" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS name="DTAero" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="DTAero"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"DTAero"
		public Keyword getNameDTAeroKeyword_3_0() { return cNameDTAeroKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class INumFoilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iNumFoil");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameNumFoilKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//iNumFoil hidden():
		//	WS? value=INT WS name="NumFoil" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=INT WS name="NumFoil" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="NumFoil"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"NumFoil"
		public Keyword getNameNumFoilKeyword_3_0() { return cNameNumFoilKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class AAirfoilListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aAirfoilList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameFoilNmKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cWSTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_7_4 = (RuleCall)cGroup_7.eContents().get(4);
		
		//aAirfoilList hidden():
		//	WS? value+=STRING WS name="FoilNm" WS? SL_COMMENT? NEWLINE (WS? value+=STRING WS? SL_COMMENT? NEWLINE)*;
		public ParserRule getRule() { return rule; }

		//WS? value+=STRING WS name="FoilNm" WS? SL_COMMENT? NEWLINE (WS? value+=STRING WS? SL_COMMENT? NEWLINE)*
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value+=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="FoilNm"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"FoilNm"
		public Keyword getNameFoilNmKeyword_3_0() { return cNameFoilNmKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }

		//(WS? value+=STRING WS? SL_COMMENT? NEWLINE)*
		public Group getGroup_7() { return cGroup_7; }

		//WS?
		public RuleCall getWSTerminalRuleCall_7_0() { return cWSTerminalRuleCall_7_0; }

		//value+=STRING
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_7_1_0() { return cValueSTRINGTerminalRuleCall_7_1_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_7_2() { return cWSTerminalRuleCall_7_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_7_3() { return cSL_COMMENTTerminalRuleCall_7_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_7_4() { return cNEWLINETerminalRuleCall_7_4; }
	}

	public class IBldNodesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iBldNodes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameBldNodesKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSL_COMMENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//iBldNodes hidden():
		//	WS? value=INT WS name="BldNodes" WS? SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=INT WS name="BldNodes" WS? SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//name="BldNodes"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"BldNodes"
		public Keyword getNameBldNodesKeyword_3_0() { return cNameBldNodesKeyword_3_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_5() { return cSL_COMMENTTerminalRuleCall_5; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
	}

	public class AAirStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aAirStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cRNodesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cAeroTwstKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cDRNodesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cWSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cChordKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cWSTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cNFoilKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final RuleCall cWSTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Keyword cPrnElmKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cWSTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cSL_COMMENTTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final RuleCall cNEWLINETerminalRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final RuleCall cWSTerminalRuleCall_15_0 = (RuleCall)cGroup_15.eContents().get(0);
		private final Assignment cRnodesAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cRnodesTNUMBERParserRuleCall_15_1_0 = (RuleCall)cRnodesAssignment_15_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_15_2 = (RuleCall)cGroup_15.eContents().get(2);
		private final Assignment cAerotwstAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cAerotwstTNUMBERParserRuleCall_15_3_0 = (RuleCall)cAerotwstAssignment_15_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_15_4 = (RuleCall)cGroup_15.eContents().get(4);
		private final Assignment cDrnodesAssignment_15_5 = (Assignment)cGroup_15.eContents().get(5);
		private final RuleCall cDrnodesTNUMBERParserRuleCall_15_5_0 = (RuleCall)cDrnodesAssignment_15_5.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_15_6 = (RuleCall)cGroup_15.eContents().get(6);
		private final Assignment cChordAssignment_15_7 = (Assignment)cGroup_15.eContents().get(7);
		private final RuleCall cChordTNUMBERParserRuleCall_15_7_0 = (RuleCall)cChordAssignment_15_7.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_15_8 = (RuleCall)cGroup_15.eContents().get(8);
		private final Assignment cNfoilAssignment_15_9 = (Assignment)cGroup_15.eContents().get(9);
		private final RuleCall cNfoilINTTerminalRuleCall_15_9_0 = (RuleCall)cNfoilAssignment_15_9.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_15_10 = (RuleCall)cGroup_15.eContents().get(10);
		private final Assignment cPrnelmAssignment_15_11 = (Assignment)cGroup_15.eContents().get(11);
		private final RuleCall cPrnelmPRINTTerminalRuleCall_15_11_0 = (RuleCall)cPrnelmAssignment_15_11.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_15_12 = (RuleCall)cGroup_15.eContents().get(12);
		private final RuleCall cSL_COMMENTTerminalRuleCall_15_13 = (RuleCall)cGroup_15.eContents().get(13);
		private final RuleCall cNEWLINETerminalRuleCall_15_14 = (RuleCall)cGroup_15.eContents().get(14);
		
		//aAirStat hidden():
		//	WS? "RNodes" WS "AeroTwst" WS "DRNodes" WS "Chord" WS "NFoil" WS "PrnElm" WS? SL_COMMENT? NEWLINE (WS? rnodes+=tNUMBER
		//	WS aerotwst+=tNUMBER WS drnodes+=tNUMBER WS chord+=tNUMBER WS nfoil+=INT WS prnelm+=PRINT WS? SL_COMMENT? NEWLINE)+;
		public ParserRule getRule() { return rule; }

		//WS? "RNodes" WS "AeroTwst" WS "DRNodes" WS "Chord" WS "NFoil" WS "PrnElm" WS? SL_COMMENT? NEWLINE (WS? rnodes+=tNUMBER
		//WS aerotwst+=tNUMBER WS drnodes+=tNUMBER WS chord+=tNUMBER WS nfoil+=INT WS prnelm+=PRINT WS? SL_COMMENT? NEWLINE)+
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//"RNodes"
		public Keyword getRNodesKeyword_1() { return cRNodesKeyword_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//"AeroTwst"
		public Keyword getAeroTwstKeyword_3() { return cAeroTwstKeyword_3; }

		//WS
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }

		//"DRNodes"
		public Keyword getDRNodesKeyword_5() { return cDRNodesKeyword_5; }

		//WS
		public RuleCall getWSTerminalRuleCall_6() { return cWSTerminalRuleCall_6; }

		//"Chord"
		public Keyword getChordKeyword_7() { return cChordKeyword_7; }

		//WS
		public RuleCall getWSTerminalRuleCall_8() { return cWSTerminalRuleCall_8; }

		//"NFoil"
		public Keyword getNFoilKeyword_9() { return cNFoilKeyword_9; }

		//WS
		public RuleCall getWSTerminalRuleCall_10() { return cWSTerminalRuleCall_10; }

		//"PrnElm"
		public Keyword getPrnElmKeyword_11() { return cPrnElmKeyword_11; }

		//WS?
		public RuleCall getWSTerminalRuleCall_12() { return cWSTerminalRuleCall_12; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_13() { return cSL_COMMENTTerminalRuleCall_13; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_14() { return cNEWLINETerminalRuleCall_14; }

		//(WS? rnodes+=tNUMBER WS aerotwst+=tNUMBER WS drnodes+=tNUMBER WS chord+=tNUMBER WS nfoil+=INT WS prnelm+=PRINT WS?
		//SL_COMMENT? NEWLINE)+
		public Group getGroup_15() { return cGroup_15; }

		//WS?
		public RuleCall getWSTerminalRuleCall_15_0() { return cWSTerminalRuleCall_15_0; }

		//rnodes+=tNUMBER
		public Assignment getRnodesAssignment_15_1() { return cRnodesAssignment_15_1; }

		//tNUMBER
		public RuleCall getRnodesTNUMBERParserRuleCall_15_1_0() { return cRnodesTNUMBERParserRuleCall_15_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_15_2() { return cWSTerminalRuleCall_15_2; }

		//aerotwst+=tNUMBER
		public Assignment getAerotwstAssignment_15_3() { return cAerotwstAssignment_15_3; }

		//tNUMBER
		public RuleCall getAerotwstTNUMBERParserRuleCall_15_3_0() { return cAerotwstTNUMBERParserRuleCall_15_3_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_15_4() { return cWSTerminalRuleCall_15_4; }

		//drnodes+=tNUMBER
		public Assignment getDrnodesAssignment_15_5() { return cDrnodesAssignment_15_5; }

		//tNUMBER
		public RuleCall getDrnodesTNUMBERParserRuleCall_15_5_0() { return cDrnodesTNUMBERParserRuleCall_15_5_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_15_6() { return cWSTerminalRuleCall_15_6; }

		//chord+=tNUMBER
		public Assignment getChordAssignment_15_7() { return cChordAssignment_15_7; }

		//tNUMBER
		public RuleCall getChordTNUMBERParserRuleCall_15_7_0() { return cChordTNUMBERParserRuleCall_15_7_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_15_8() { return cWSTerminalRuleCall_15_8; }

		//nfoil+=INT
		public Assignment getNfoilAssignment_15_9() { return cNfoilAssignment_15_9; }

		//INT
		public RuleCall getNfoilINTTerminalRuleCall_15_9_0() { return cNfoilINTTerminalRuleCall_15_9_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_15_10() { return cWSTerminalRuleCall_15_10; }

		//prnelm+=PRINT
		public Assignment getPrnelmAssignment_15_11() { return cPrnelmAssignment_15_11; }

		//PRINT
		public RuleCall getPrnelmPRINTTerminalRuleCall_15_11_0() { return cPrnelmPRINTTerminalRuleCall_15_11_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_15_12() { return cWSTerminalRuleCall_15_12; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_15_13() { return cSL_COMMENTTerminalRuleCall_15_13; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_15_14() { return cNEWLINETerminalRuleCall_15_14; }
	}
	
	
	private ModelFastadnElements pModelFastadn;
	private TNUMBERElements pTNUMBER;
	private TARRAY_STRElements pTARRAY_STR;
	private TerminalRule tINT;
	private TerminalRule tNUMBER;
	private TerminalRule tUNITS;
	private TerminalRule tSTALL;
	private TerminalRule tCM;
	private TerminalRule tINFMODEL;
	private TerminalRule tINDMODEL;
	private TerminalRule tPRANDTL;
	private TerminalRule tPRINT;
	private TerminalRule tSTRING;
	private TerminalRule tNEWLINE;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private HeaderElements pHeader;
	private SUnitsElements pSUnits;
	private SStallModElements pSStallMod;
	private SUseCmElements pSUseCm;
	private SInfModelElements pSInfModel;
	private SIndModelElements pSIndModel;
	private NAtolerElements pNAtoler;
	private STLModelElements pSTLModel;
	private SHLModelElements pSHLModel;
	private FWindFileElements pFWindFile;
	private NHHElements pNHH;
	private NTwrShadElements pNTwrShad;
	private NShadHWidElements pNShadHWid;
	private NTShadRefPtElements pNTShadRefPt;
	private NRhoElements pNRho;
	private NKinViscElements pNKinVisc;
	private NDTAeroElements pNDTAero;
	private INumFoilElements pINumFoil;
	private AAirfoilListElements pAAirfoilList;
	private IBldNodesElements pIBldNodes;
	private AAirStatElements pAAirStat;
	
	private final Grammar grammar;

	@Inject
	public FastadnGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sc.ndt.editor.fast.Fastadn".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// about EOF
	//// http://www.euclideanspace.com/software/development/eclipse/xtext/grammar/lexer/index.htm
	//ModelFastadn:
	//	Head=Header SIUnits=sUnits StallMod=sStallMod UseCm=sUseCm InfModel=sInfModel IndModel=sIndModel Atoler=nAtoler
	//	TLModel=sTLModel HLModel=sHLModel WindFile=fWindFile HH=nHH TwrShad=nTwrShad ShadHWid=nShadHWid TShadRefPt=nTShadRefPt
	//	Rho= // Air density (kg/m^3)						
	//	nRho KinVisc= // Kinematic air viscosity [MUST !=0 FOR NOISE]						(m^2/sec)						
	//	nKinVisc DTAero= // Time interval for aerodynamic calculations						(sec)
	//	nDTAero NumFoil= // Number of airfoil files (-)
	//	iNumFoil FoilNm= // Names of the airfoil files [NumFoil lines]					(quoted strings)
	//	aAirfoilList BldNodes=iBldNodes AirStat=aAirStat (WS | NEWLINE | SL_COMMENT)*;
	public ModelFastadnElements getModelFastadnAccess() {
		return (pModelFastadn != null) ? pModelFastadn : (pModelFastadn = new ModelFastadnElements());
	}
	
	public ParserRule getModelFastadnRule() {
		return getModelFastadnAccess().getRule();
	}

	//tNUMBER returns ecore::EFloat:
	//	INT | NUMBER;
	public TNUMBERElements getTNUMBERAccess() {
		return (pTNUMBER != null) ? pTNUMBER : (pTNUMBER = new TNUMBERElements());
	}
	
	public ParserRule getTNUMBERRule() {
		return getTNUMBERAccess().getRule();
	}

	////from online help: The QualifiedName is a little special. It does not contain any assignments. 
	//// Therefore, it serves as a data type rule, which returns a String. So the feature name of a 
	//// Package is still of type String. 
	////FILE: ('.'?'.'?)('/'? STRING)*;
	////FILE returns ecore::EString:
	////	'"' ((('.'|'..')? '/')? (NAME '/')* NAME'.'NAME)? '"';
	//tARRAY_STR returns ecore::EString hidden(SL_COMMENT):
	//	(WS? STRING WS? NEWLINE)*;
	public TARRAY_STRElements getTARRAY_STRAccess() {
		return (pTARRAY_STR != null) ? pTARRAY_STR : (pTARRAY_STR = new TARRAY_STRElements());
	}
	
	public ParserRule getTARRAY_STRRule() {
		return getTARRAY_STRAccess().getRule();
	}

	//// TERMINALS 
	//// NOTE : see http://www.eclipse.org/Xtext/documentation.html#syntax
	//// NOTE : the order of terminal rules is crucial for your grammar, as they may shadow each other. This is especially important for newly introduced rules in connection with imported rules from used grammars. 
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal NUMBER returns ecore::EFloat:
	//	("+" | "-")? INT ("." INT?) (("E" | "e") ("+" | "-")? INT)? | ("+" | "-")? INT (("E" | "e") ("+" | "-")? INT) | ("."
	//	INT) (("E" | "e") ("+" | "-")? INT)? | "-" INT;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal UNITS:
	//	"SI";
	public TerminalRule getUNITSRule() {
		return (tUNITS != null) ? tUNITS : (tUNITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNITS"));
	} 

	//terminal STALL:
	//	"BEDDOES" | "STEADY";
	public TerminalRule getSTALLRule() {
		return (tSTALL != null) ? tSTALL : (tSTALL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STALL"));
	} 

	//terminal CM:
	//	"USE_CM" | "NO_CM";
	public TerminalRule getCMRule() {
		return (tCM != null) ? tCM : (tCM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CM"));
	} 

	//terminal INFMODEL:
	//	"EQUIL" | "DYNIN";
	public TerminalRule getINFMODELRule() {
		return (tINFMODEL != null) ? tINFMODEL : (tINFMODEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INFMODEL"));
	} 

	//terminal INDMODEL:
	//	"NONE" | "WAKE" | "SWIRL";
	public TerminalRule getINDMODELRule() {
		return (tINDMODEL != null) ? tINDMODEL : (tINDMODEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INDMODEL"));
	} 

	//terminal PRANDTL:
	//	"PRANDtl" | "NONE";
	public TerminalRule getPRANDTLRule() {
		return (tPRANDTL != null) ? tPRANDTL : (tPRANDTL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRANDTL"));
	} 

	//terminal PRINT:
	//	"PRINT" | "NOPRINT";
	public TerminalRule getPRINTRule() {
		return (tPRINT != null) ? tPRINT : (tPRINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRINT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal NEWLINE:
	//	"\r" | "\n" | "\r\n";
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	//terminal SL_COMMENT:
	//	"-" !"0".."9" !("\r" | "\n" | "\r\n")*;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//Header hidden():
	//	name=SL_COMMENT NEWLINE;
	public HeaderElements getHeaderAccess() {
		return (pHeader != null) ? pHeader : (pHeader = new HeaderElements());
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}

	//sUnits hidden():
	//	WS? value=UNITS WS name="SysUnits" WS? SL_COMMENT? NEWLINE;
	public SUnitsElements getSUnitsAccess() {
		return (pSUnits != null) ? pSUnits : (pSUnits = new SUnitsElements());
	}
	
	public ParserRule getSUnitsRule() {
		return getSUnitsAccess().getRule();
	}

	//sStallMod hidden():
	//	WS? value=STALL WS name="StallMod" WS? SL_COMMENT? NEWLINE;
	public SStallModElements getSStallModAccess() {
		return (pSStallMod != null) ? pSStallMod : (pSStallMod = new SStallModElements());
	}
	
	public ParserRule getSStallModRule() {
		return getSStallModAccess().getRule();
	}

	//sUseCm hidden():
	//	WS? value=CM WS name="UseCm" WS? SL_COMMENT? NEWLINE;
	public SUseCmElements getSUseCmAccess() {
		return (pSUseCm != null) ? pSUseCm : (pSUseCm = new SUseCmElements());
	}
	
	public ParserRule getSUseCmRule() {
		return getSUseCmAccess().getRule();
	}

	//sInfModel hidden():
	//	WS? value=INFMODEL WS name="InfModel" WS? SL_COMMENT? NEWLINE;
	public SInfModelElements getSInfModelAccess() {
		return (pSInfModel != null) ? pSInfModel : (pSInfModel = new SInfModelElements());
	}
	
	public ParserRule getSInfModelRule() {
		return getSInfModelAccess().getRule();
	}

	//sIndModel hidden():
	//	WS? value=INDMODEL WS name="IndModel" WS? SL_COMMENT? NEWLINE;
	public SIndModelElements getSIndModelAccess() {
		return (pSIndModel != null) ? pSIndModel : (pSIndModel = new SIndModelElements());
	}
	
	public ParserRule getSIndModelRule() {
		return getSIndModelAccess().getRule();
	}

	//nAtoler hidden():
	//	WS? value=tNUMBER WS name=("Atoler" | "AToler") WS? SL_COMMENT? NEWLINE;
	public NAtolerElements getNAtolerAccess() {
		return (pNAtoler != null) ? pNAtoler : (pNAtoler = new NAtolerElements());
	}
	
	public ParserRule getNAtolerRule() {
		return getNAtolerAccess().getRule();
	}

	//sTLModel hidden():
	//	WS? value=PRANDTL WS name="TLModel" WS? SL_COMMENT? NEWLINE;
	public STLModelElements getSTLModelAccess() {
		return (pSTLModel != null) ? pSTLModel : (pSTLModel = new STLModelElements());
	}
	
	public ParserRule getSTLModelRule() {
		return getSTLModelAccess().getRule();
	}

	//sHLModel hidden():
	//	WS? value=PRANDTL WS name="HLModel" WS? SL_COMMENT? NEWLINE;
	public SHLModelElements getSHLModelAccess() {
		return (pSHLModel != null) ? pSHLModel : (pSHLModel = new SHLModelElements());
	}
	
	public ParserRule getSHLModelRule() {
		return getSHLModelAccess().getRule();
	}

	//fWindFile hidden():
	//	WS? value=STRING WS name="WindFile" WS? SL_COMMENT? NEWLINE;
	public FWindFileElements getFWindFileAccess() {
		return (pFWindFile != null) ? pFWindFile : (pFWindFile = new FWindFileElements());
	}
	
	public ParserRule getFWindFileRule() {
		return getFWindFileAccess().getRule();
	}

	//nHH hidden():
	//	WS? value=tNUMBER WS name="HH" WS? SL_COMMENT? NEWLINE;
	public NHHElements getNHHAccess() {
		return (pNHH != null) ? pNHH : (pNHH = new NHHElements());
	}
	
	public ParserRule getNHHRule() {
		return getNHHAccess().getRule();
	}

	//nTwrShad hidden():
	//	WS? value=tNUMBER WS name="TwrShad" WS? SL_COMMENT? NEWLINE;
	public NTwrShadElements getNTwrShadAccess() {
		return (pNTwrShad != null) ? pNTwrShad : (pNTwrShad = new NTwrShadElements());
	}
	
	public ParserRule getNTwrShadRule() {
		return getNTwrShadAccess().getRule();
	}

	//nShadHWid hidden():
	//	WS? value=tNUMBER WS name="ShadHWid" WS? SL_COMMENT? NEWLINE;
	public NShadHWidElements getNShadHWidAccess() {
		return (pNShadHWid != null) ? pNShadHWid : (pNShadHWid = new NShadHWidElements());
	}
	
	public ParserRule getNShadHWidRule() {
		return getNShadHWidAccess().getRule();
	}

	//nTShadRefPt hidden():
	//	WS? value=tNUMBER WS name="T_Shad_Refpt" WS? SL_COMMENT? NEWLINE;
	public NTShadRefPtElements getNTShadRefPtAccess() {
		return (pNTShadRefPt != null) ? pNTShadRefPt : (pNTShadRefPt = new NTShadRefPtElements());
	}
	
	public ParserRule getNTShadRefPtRule() {
		return getNTShadRefPtAccess().getRule();
	}

	//nRho hidden():
	//	WS? value=tNUMBER WS name=("Rho" | "AirDens") WS? SL_COMMENT? NEWLINE;
	public NRhoElements getNRhoAccess() {
		return (pNRho != null) ? pNRho : (pNRho = new NRhoElements());
	}
	
	public ParserRule getNRhoRule() {
		return getNRhoAccess().getRule();
	}

	//nKinVisc hidden():
	//	WS? value=tNUMBER WS name="KinVisc" WS? SL_COMMENT? NEWLINE;
	public NKinViscElements getNKinViscAccess() {
		return (pNKinVisc != null) ? pNKinVisc : (pNKinVisc = new NKinViscElements());
	}
	
	public ParserRule getNKinViscRule() {
		return getNKinViscAccess().getRule();
	}

	//nDTAero hidden():
	//	WS? value=tNUMBER WS name="DTAero" WS? SL_COMMENT? NEWLINE;
	public NDTAeroElements getNDTAeroAccess() {
		return (pNDTAero != null) ? pNDTAero : (pNDTAero = new NDTAeroElements());
	}
	
	public ParserRule getNDTAeroRule() {
		return getNDTAeroAccess().getRule();
	}

	//iNumFoil hidden():
	//	WS? value=INT WS name="NumFoil" WS? SL_COMMENT? NEWLINE;
	public INumFoilElements getINumFoilAccess() {
		return (pINumFoil != null) ? pINumFoil : (pINumFoil = new INumFoilElements());
	}
	
	public ParserRule getINumFoilRule() {
		return getINumFoilAccess().getRule();
	}

	//aAirfoilList hidden():
	//	WS? value+=STRING WS name="FoilNm" WS? SL_COMMENT? NEWLINE (WS? value+=STRING WS? SL_COMMENT? NEWLINE)*;
	public AAirfoilListElements getAAirfoilListAccess() {
		return (pAAirfoilList != null) ? pAAirfoilList : (pAAirfoilList = new AAirfoilListElements());
	}
	
	public ParserRule getAAirfoilListRule() {
		return getAAirfoilListAccess().getRule();
	}

	//iBldNodes hidden():
	//	WS? value=INT WS name="BldNodes" WS? SL_COMMENT? NEWLINE;
	public IBldNodesElements getIBldNodesAccess() {
		return (pIBldNodes != null) ? pIBldNodes : (pIBldNodes = new IBldNodesElements());
	}
	
	public ParserRule getIBldNodesRule() {
		return getIBldNodesAccess().getRule();
	}

	//aAirStat hidden():
	//	WS? "RNodes" WS "AeroTwst" WS "DRNodes" WS "Chord" WS "NFoil" WS "PrnElm" WS? SL_COMMENT? NEWLINE (WS? rnodes+=tNUMBER
	//	WS aerotwst+=tNUMBER WS drnodes+=tNUMBER WS chord+=tNUMBER WS nfoil+=INT WS prnelm+=PRINT WS? SL_COMMENT? NEWLINE)+;
	public AAirStatElements getAAirStatAccess() {
		return (pAAirStat != null) ? pAAirStat : (pAAirStat = new AAirStatElements());
	}
	
	public ParserRule getAAirStatRule() {
		return getAAirStatAccess().getRule();
	}
}
