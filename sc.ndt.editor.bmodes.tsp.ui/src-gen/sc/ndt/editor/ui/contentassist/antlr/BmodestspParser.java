/*
* generated by Xtext
*/
package sc.ndt.editor.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import sc.ndt.editor.services.BmodestspGrammarAccess;

public class BmodestspParser extends AbstractContentAssistParser {
	
	@Inject
	private BmodestspGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected sc.ndt.editor.ui.contentassist.antlr.internal.InternalBmodestspParser createParser() {
		sc.ndt.editor.ui.contentassist.antlr.internal.InternalBmodestspParser result = new sc.ndt.editor.ui.contentassist.antlr.internal.InternalBmodestspParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelBmodestspAccess().getAlternatives_4(), "rule__ModelBmodestsp__Alternatives_4");
					put(grammarAccess.getTNUMBERAccess().getAlternatives(), "rule__TNUMBER__Alternatives");
					put(grammarAccess.getModelBmodestspAccess().getGroup(), "rule__ModelBmodestsp__Group__0");
					put(grammarAccess.getTARRAY_STRAccess().getGroup(), "rule__TARRAY_STR__Group__0");
					put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
					put(grammarAccess.getINodesAccess().getGroup(), "rule__INodes__Group__0");
					put(grammarAccess.getASecAccess().getGroup(), "rule__ASec__Group__0");
					put(grammarAccess.getASecAccess().getGroup_58(), "rule__ASec__Group_58__0");
					put(grammarAccess.getModelBmodestspAccess().getHeadAssignment_0(), "rule__ModelBmodestsp__HeadAssignment_0");
					put(grammarAccess.getModelBmodestspAccess().getNNodesAssignment_1(), "rule__ModelBmodestsp__NNodesAssignment_1");
					put(grammarAccess.getModelBmodestspAccess().getSectionsAssignment_3(), "rule__ModelBmodestsp__SectionsAssignment_3");
					put(grammarAccess.getHeaderAccess().getNameAssignment_0(), "rule__Header__NameAssignment_0");
					put(grammarAccess.getINodesAccess().getValueAssignment_1(), "rule__INodes__ValueAssignment_1");
					put(grammarAccess.getINodesAccess().getNameAssignment_3(), "rule__INodes__NameAssignment_3");
					put(grammarAccess.getASecAccess().getSec_locAssignment_58_1(), "rule__ASec__Sec_locAssignment_58_1");
					put(grammarAccess.getASecAccess().getStr_twAssignment_58_3(), "rule__ASec__Str_twAssignment_58_3");
					put(grammarAccess.getASecAccess().getTw_inerAssignment_58_5(), "rule__ASec__Tw_inerAssignment_58_5");
					put(grammarAccess.getASecAccess().getMass_denAssignment_58_7(), "rule__ASec__Mass_denAssignment_58_7");
					put(grammarAccess.getASecAccess().getFlp_inerAssignment_58_9(), "rule__ASec__Flp_inerAssignment_58_9");
					put(grammarAccess.getASecAccess().getEdge_inerAssignment_58_11(), "rule__ASec__Edge_inerAssignment_58_11");
					put(grammarAccess.getASecAccess().getFlp_stffAssignment_58_13(), "rule__ASec__Flp_stffAssignment_58_13");
					put(grammarAccess.getASecAccess().getEdge_stffAssignment_58_15(), "rule__ASec__Edge_stffAssignment_58_15");
					put(grammarAccess.getASecAccess().getTor_stffAssignment_58_17(), "rule__ASec__Tor_stffAssignment_58_17");
					put(grammarAccess.getASecAccess().getAxial_stffAssignment_58_19(), "rule__ASec__Axial_stffAssignment_58_19");
					put(grammarAccess.getASecAccess().getCg_offstAssignment_58_21(), "rule__ASec__Cg_offstAssignment_58_21");
					put(grammarAccess.getASecAccess().getSc_offstAssignment_58_23(), "rule__ASec__Sc_offstAssignment_58_23");
					put(grammarAccess.getASecAccess().getTc_offstAssignment_58_25(), "rule__ASec__Tc_offstAssignment_58_25");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			sc.ndt.editor.ui.contentassist.antlr.internal.InternalBmodestspParser typedParser = (sc.ndt.editor.ui.contentassist.antlr.internal.InternalBmodestspParser) parser;
			typedParser.entryRuleModelBmodestsp();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public BmodestspGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BmodestspGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
