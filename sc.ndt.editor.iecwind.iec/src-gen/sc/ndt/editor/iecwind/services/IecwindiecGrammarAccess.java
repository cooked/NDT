/*
* generated by Xtext
*/
package sc.ndt.editor.iecwind.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class IecwindiecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelIecwindiecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelIecwindiec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadHeaderParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cSectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSectionsSectionParserRuleCall_1_0 = (RuleCall)cSectionsAssignment_1.eContents().get(0);
		private final Assignment cSIUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSIUnitsSiUnitsParserRuleCall_2_0 = (RuleCall)cSIUnitsAssignment_2.eContents().get(0);
		private final Assignment cStartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStartIStartParserRuleCall_3_0 = (RuleCall)cStartAssignment_3.eContents().get(0);
		private final Assignment cSectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSectionsSectionParserRuleCall_4_0 = (RuleCall)cSectionsAssignment_4.eContents().get(0);
		private final Assignment cIECClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIECClassIIECClassParserRuleCall_5_0 = (RuleCall)cIECClassAssignment_5.eContents().get(0);
		private final Assignment cWindTurbAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWindTurbSWindTurbParserRuleCall_6_0 = (RuleCall)cWindTurbAssignment_6.eContents().get(0);
		private final Assignment cWindSlopeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWindSlopeNWindSlopeParserRuleCall_7_0 = (RuleCall)cWindSlopeAssignment_7.eContents().get(0);
		private final Assignment cIECStandardAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIECStandardIIECStdParserRuleCall_8_0 = (RuleCall)cIECStandardAssignment_8.eContents().get(0);
		private final Assignment cSectionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSectionsSectionParserRuleCall_9_0 = (RuleCall)cSectionsAssignment_9.eContents().get(0);
		private final Assignment cHubHeightAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHubHeightNHubHeightParserRuleCall_10_0 = (RuleCall)cHubHeightAssignment_10.eContents().get(0);
		private final Assignment cRotDiamAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cRotDiamNRotDiamParserRuleCall_11_0 = (RuleCall)cRotDiamAssignment_11.eContents().get(0);
		private final Assignment cWindInAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cWindInNWindInParserRuleCall_12_0 = (RuleCall)cWindInAssignment_12.eContents().get(0);
		private final Assignment cWindNomAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cWindNomNWindNomParserRuleCall_13_0 = (RuleCall)cWindNomAssignment_13.eContents().get(0);
		private final Assignment cWindOutAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cWindOutNWindOutParserRuleCall_14_0 = (RuleCall)cWindOutAssignment_14.eContents().get(0);
		private final Assignment cSectionsAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cSectionsSectionParserRuleCall_15_0 = (RuleCall)cSectionsAssignment_15.eContents().get(0);
		private final Assignment cOutListAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cOutListVOutListParserRuleCall_16_0 = (RuleCall)cOutListAssignment_16.eContents().get(0);
		private final Alternatives cAlternatives_17 = (Alternatives)cGroup.eContents().get(17);
		private final RuleCall cWSTerminalRuleCall_17_0 = (RuleCall)cAlternatives_17.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_17_1 = (RuleCall)cAlternatives_17.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_17_2 = (RuleCall)cAlternatives_17.eContents().get(2);
		
		//// about EOF
		//// http://www.euclideanspace.com/software/development/eclipse/xtext/grammar/lexer/index.htm
		//ModelIecwindiec:
		//	Head=Header sections+=Section SIUnits=siUnits Start=iStart sections+=Section IECClass=iIECClass WindTurb=sWindTurb
		//	WindSlope=nWindSlope IECStandard=iIECStd sections+=Section HubHeight=nHubHeight RotDiam=nRotDiam WindIn=nWindIn
		//	WindNom=nWindNom WindOut=nWindOut sections+=Section OutList= // The next line(s) contains a list of output parameters.  See OutList.txt for a listing of available output channels.
		//	vOutList (WS | NEWLINE | SL_COMMENT)* // The word "END" must appear in the first 3 columns of this last line).
		//;
		public ParserRule getRule() { return rule; }

		//Head=Header sections+=Section SIUnits=siUnits Start=iStart sections+=Section IECClass=iIECClass WindTurb=sWindTurb
		//WindSlope=nWindSlope IECStandard=iIECStd sections+=Section HubHeight=nHubHeight RotDiam=nRotDiam WindIn=nWindIn
		//WindNom=nWindNom WindOut=nWindOut sections+=Section OutList= // The next line(s) contains a list of output parameters.  See OutList.txt for a listing of available output channels.
		//vOutList (WS | NEWLINE | SL_COMMENT)* // The word "END" must appear in the first 3 columns of this last line).
		public Group getGroup() { return cGroup; }

		//Head=Header
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//Header
		public RuleCall getHeadHeaderParserRuleCall_0_0() { return cHeadHeaderParserRuleCall_0_0; }

		//sections+=Section
		public Assignment getSectionsAssignment_1() { return cSectionsAssignment_1; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_1_0() { return cSectionsSectionParserRuleCall_1_0; }

		//SIUnits=siUnits
		public Assignment getSIUnitsAssignment_2() { return cSIUnitsAssignment_2; }

		//siUnits
		public RuleCall getSIUnitsSiUnitsParserRuleCall_2_0() { return cSIUnitsSiUnitsParserRuleCall_2_0; }

		//Start=iStart
		public Assignment getStartAssignment_3() { return cStartAssignment_3; }

		//iStart
		public RuleCall getStartIStartParserRuleCall_3_0() { return cStartIStartParserRuleCall_3_0; }

		//sections+=Section
		public Assignment getSectionsAssignment_4() { return cSectionsAssignment_4; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_4_0() { return cSectionsSectionParserRuleCall_4_0; }

		//IECClass=iIECClass
		public Assignment getIECClassAssignment_5() { return cIECClassAssignment_5; }

		//iIECClass
		public RuleCall getIECClassIIECClassParserRuleCall_5_0() { return cIECClassIIECClassParserRuleCall_5_0; }

		//WindTurb=sWindTurb
		public Assignment getWindTurbAssignment_6() { return cWindTurbAssignment_6; }

		//sWindTurb
		public RuleCall getWindTurbSWindTurbParserRuleCall_6_0() { return cWindTurbSWindTurbParserRuleCall_6_0; }

		//WindSlope=nWindSlope
		public Assignment getWindSlopeAssignment_7() { return cWindSlopeAssignment_7; }

		//nWindSlope
		public RuleCall getWindSlopeNWindSlopeParserRuleCall_7_0() { return cWindSlopeNWindSlopeParserRuleCall_7_0; }

		//IECStandard=iIECStd
		public Assignment getIECStandardAssignment_8() { return cIECStandardAssignment_8; }

		//iIECStd
		public RuleCall getIECStandardIIECStdParserRuleCall_8_0() { return cIECStandardIIECStdParserRuleCall_8_0; }

		//sections+=Section
		public Assignment getSectionsAssignment_9() { return cSectionsAssignment_9; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_9_0() { return cSectionsSectionParserRuleCall_9_0; }

		//HubHeight=nHubHeight
		public Assignment getHubHeightAssignment_10() { return cHubHeightAssignment_10; }

		//nHubHeight
		public RuleCall getHubHeightNHubHeightParserRuleCall_10_0() { return cHubHeightNHubHeightParserRuleCall_10_0; }

		//RotDiam=nRotDiam
		public Assignment getRotDiamAssignment_11() { return cRotDiamAssignment_11; }

		//nRotDiam
		public RuleCall getRotDiamNRotDiamParserRuleCall_11_0() { return cRotDiamNRotDiamParserRuleCall_11_0; }

		//WindIn=nWindIn
		public Assignment getWindInAssignment_12() { return cWindInAssignment_12; }

		//nWindIn
		public RuleCall getWindInNWindInParserRuleCall_12_0() { return cWindInNWindInParserRuleCall_12_0; }

		//WindNom=nWindNom
		public Assignment getWindNomAssignment_13() { return cWindNomAssignment_13; }

		//nWindNom
		public RuleCall getWindNomNWindNomParserRuleCall_13_0() { return cWindNomNWindNomParserRuleCall_13_0; }

		//WindOut=nWindOut
		public Assignment getWindOutAssignment_14() { return cWindOutAssignment_14; }

		//nWindOut
		public RuleCall getWindOutNWindOutParserRuleCall_14_0() { return cWindOutNWindOutParserRuleCall_14_0; }

		//sections+=Section
		public Assignment getSectionsAssignment_15() { return cSectionsAssignment_15; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_15_0() { return cSectionsSectionParserRuleCall_15_0; }

		//OutList= // The next line(s) contains a list of output parameters.  See OutList.txt for a listing of available output channels.
		//vOutList
		public Assignment getOutListAssignment_16() { return cOutListAssignment_16; }

		//// The next line(s) contains a list of output parameters.  See OutList.txt for a listing of available output channels.
		//vOutList
		public RuleCall getOutListVOutListParserRuleCall_16_0() { return cOutListVOutListParserRuleCall_16_0; }

		//(WS | NEWLINE | SL_COMMENT)*
		public Alternatives getAlternatives_17() { return cAlternatives_17; }

		//WS
		public RuleCall getWSTerminalRuleCall_17_0() { return cWSTerminalRuleCall_17_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_17_1() { return cNEWLINETerminalRuleCall_17_1; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_17_2() { return cSL_COMMENTTerminalRuleCall_17_2; }
	}

	public class TNUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tNUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//tNUMBER returns ecore::EFloat:
		//	INT | NUMBER;
		public ParserRule getRule() { return rule; }

		//INT | NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}

	public class TBOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tBOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTRUEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFALSEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFalseKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFalseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//tBOOL returns ecore::EBoolean:
		//	"TRUE" | "True" | "true" | "FALSE" | "False" | "false";
		public ParserRule getRule() { return rule; }

		//"TRUE" | "True" | "true" | "FALSE" | "False" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"TRUE"
		public Keyword getTRUEKeyword_0() { return cTRUEKeyword_0; }

		//"True"
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }

		//"true"
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }

		//"FALSE"
		public Keyword getFALSEKeyword_3() { return cFALSEKeyword_3; }

		//"False"
		public Keyword getFalseKeyword_4() { return cFalseKeyword_4; }

		//"false"
		public Keyword getFalseKeyword_5() { return cFalseKeyword_5; }
	}

	public class TARRAY_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tARRAY_INT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////(('T'|'t')('R'|'r')('U'|'u')('E'|'e')) | //(('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e'));
		////from online help: The QualifiedName is a little special. It does not contain any assignments. 
		//// Therefore, it serves as a data type rule, which returns a String. So the feature name of a 
		//// Package is still of type String. 
		////FILE: ('.'?'.'?)('/'? STRING)*;
		////FILE returns ecore::EString:
		////	'"' ((('.'|'..')? '/')? (NAME '/')* NAME'.'NAME)? '"';
		//tARRAY_INT returns ecore::EString:
		//	INT ("," INT)*;
		public ParserRule getRule() { return rule; }

		//INT ("," INT)*
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("," INT)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class TARRAY_OUTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tARRAY_OUT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOUTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// OK tARRAY_STR returns ecore::EString hidden(SL_COMMENT): (WS? '"' WS? OUT_CH WS? (',' WS? OUT_CH WS?)* '"' WS? NEWLINE )+;
		//tARRAY_OUT returns ecore::EString hidden(SL_COMMENT):
		//	(WS? OUT WS? NEWLINE)*;
		public ParserRule getRule() { return rule; }

		//(WS? OUT WS? NEWLINE)*
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//OUT
		public RuleCall getOUTTerminalRuleCall_1() { return cOUTTerminalRuleCall_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_3() { return cNEWLINETerminalRuleCall_3; }
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRowSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cRowAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Header hidden():
		//	row=SL_COMMENT NEWLINE;
		public ParserRule getRule() { return rule; }

		//row=SL_COMMENT NEWLINE
		public Group getGroup() { return cGroup; }

		//row=SL_COMMENT
		public Assignment getRowAssignment_0() { return cRowAssignment_0; }

		//SL_COMMENT
		public RuleCall getRowSL_COMMENTTerminalRuleCall_0_0() { return cRowSL_COMMENTTerminalRuleCall_0_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
	}

	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSL_COMMENTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Section hidden():
		//	name=SL_COMMENT NEWLINE;
		public ParserRule getRule() { return rule; }

		//name=SL_COMMENT NEWLINE
		public Group getGroup() { return cGroup; }

		//name=SL_COMMENT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SL_COMMENT
		public RuleCall getNameSL_COMMENTTerminalRuleCall_0_0() { return cNameSL_COMMENTTerminalRuleCall_0_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
	}

	public class SiUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "siUnits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTBOOLParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//siUnits hidden():
		//	WS? value=tBOOL WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tBOOL WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tBOOL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tBOOL
		public RuleCall getValueTBOOLParserRuleCall_1_0() { return cValueTBOOLParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class IStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//iStart hidden():
		//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class IIECClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iIECClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//iIECClass hidden():
		//	WS? value=INT WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=INT WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class SWindTurbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sWindTurb");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCLASSTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//sWindTurb hidden():
		//	WS? value=CLASS WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=CLASS WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=CLASS
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//CLASS
		public RuleCall getValueCLASSTerminalRuleCall_1_0() { return cValueCLASSTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class NWindSlopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nWindSlope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//nWindSlope hidden():
		//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class IIECStdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iIECStd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//iIECStd hidden():
		//	WS? value=INT WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=INT WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class NHubHeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nHubHeight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//nHubHeight hidden():
		//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class NRotDiamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nRotDiam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//nRotDiam hidden():
		//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class NWindInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nWindIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//nWindIn hidden():
		//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class NWindNomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nWindNom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//nWindNom hidden():
		//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class NWindOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nWindOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//nWindOut hidden():
		//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
		public ParserRule getRule() { return rule; }

		//WS? value=tNUMBER WS SL_COMMENT? NEWLINE
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=tNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//tNUMBER
		public RuleCall getValueTNUMBERParserRuleCall_1_0() { return cValueTNUMBERParserRuleCall_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//SL_COMMENT?
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
	}

	public class VOutListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vOutList");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueTARRAY_OUTParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//vOutList hidden():
		//	value=tARRAY_OUT;
		public ParserRule getRule() { return rule; }

		//value=tARRAY_OUT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//tARRAY_OUT
		public RuleCall getValueTARRAY_OUTParserRuleCall_0() { return cValueTARRAY_OUTParserRuleCall_0; }
	}
	
	
	private ModelIecwindiecElements pModelIecwindiec;
	private TNUMBERElements pTNUMBER;
	private TBOOLElements pTBOOL;
	private TARRAY_INTElements pTARRAY_INT;
	private TARRAY_OUTElements pTARRAY_OUT;
	private TerminalRule tOUT;
	private TerminalRule tINT;
	private TerminalRule tNUMBER;
	private TerminalRule tCLASS;
	private TerminalRule tSTRING;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tNEWLINE;
	private TerminalRule tWS;
	private HeaderElements pHeader;
	private SectionElements pSection;
	private SiUnitsElements pSiUnits;
	private IStartElements pIStart;
	private IIECClassElements pIIECClass;
	private SWindTurbElements pSWindTurb;
	private NWindSlopeElements pNWindSlope;
	private IIECStdElements pIIECStd;
	private NHubHeightElements pNHubHeight;
	private NRotDiamElements pNRotDiam;
	private NWindInElements pNWindIn;
	private NWindNomElements pNWindNom;
	private NWindOutElements pNWindOut;
	private VOutListElements pVOutList;
	
	private final Grammar grammar;

	@Inject
	public IecwindiecGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sc.ndt.editor.iecwind.Iecwindiec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// about EOF
	//// http://www.euclideanspace.com/software/development/eclipse/xtext/grammar/lexer/index.htm
	//ModelIecwindiec:
	//	Head=Header sections+=Section SIUnits=siUnits Start=iStart sections+=Section IECClass=iIECClass WindTurb=sWindTurb
	//	WindSlope=nWindSlope IECStandard=iIECStd sections+=Section HubHeight=nHubHeight RotDiam=nRotDiam WindIn=nWindIn
	//	WindNom=nWindNom WindOut=nWindOut sections+=Section OutList= // The next line(s) contains a list of output parameters.  See OutList.txt for a listing of available output channels.
	//	vOutList (WS | NEWLINE | SL_COMMENT)* // The word "END" must appear in the first 3 columns of this last line).
	//;
	public ModelIecwindiecElements getModelIecwindiecAccess() {
		return (pModelIecwindiec != null) ? pModelIecwindiec : (pModelIecwindiec = new ModelIecwindiecElements());
	}
	
	public ParserRule getModelIecwindiecRule() {
		return getModelIecwindiecAccess().getRule();
	}

	//tNUMBER returns ecore::EFloat:
	//	INT | NUMBER;
	public TNUMBERElements getTNUMBERAccess() {
		return (pTNUMBER != null) ? pTNUMBER : (pTNUMBER = new TNUMBERElements());
	}
	
	public ParserRule getTNUMBERRule() {
		return getTNUMBERAccess().getRule();
	}

	//tBOOL returns ecore::EBoolean:
	//	"TRUE" | "True" | "true" | "FALSE" | "False" | "false";
	public TBOOLElements getTBOOLAccess() {
		return (pTBOOL != null) ? pTBOOL : (pTBOOL = new TBOOLElements());
	}
	
	public ParserRule getTBOOLRule() {
		return getTBOOLAccess().getRule();
	}

	////(('T'|'t')('R'|'r')('U'|'u')('E'|'e')) | //(('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e'));
	////from online help: The QualifiedName is a little special. It does not contain any assignments. 
	//// Therefore, it serves as a data type rule, which returns a String. So the feature name of a 
	//// Package is still of type String. 
	////FILE: ('.'?'.'?)('/'? STRING)*;
	////FILE returns ecore::EString:
	////	'"' ((('.'|'..')? '/')? (NAME '/')* NAME'.'NAME)? '"';
	//tARRAY_INT returns ecore::EString:
	//	INT ("," INT)*;
	public TARRAY_INTElements getTARRAY_INTAccess() {
		return (pTARRAY_INT != null) ? pTARRAY_INT : (pTARRAY_INT = new TARRAY_INTElements());
	}
	
	public ParserRule getTARRAY_INTRule() {
		return getTARRAY_INTAccess().getRule();
	}

	//// OK tARRAY_STR returns ecore::EString hidden(SL_COMMENT): (WS? '"' WS? OUT_CH WS? (',' WS? OUT_CH WS?)* '"' WS? NEWLINE )+;
	//tARRAY_OUT returns ecore::EString hidden(SL_COMMENT):
	//	(WS? OUT WS? NEWLINE)*;
	public TARRAY_OUTElements getTARRAY_OUTAccess() {
		return (pTARRAY_OUT != null) ? pTARRAY_OUT : (pTARRAY_OUT = new TARRAY_OUTElements());
	}
	
	public ParserRule getTARRAY_OUTRule() {
		return getTARRAY_OUTAccess().getRule();
	}

	//// TERMINALS 
	//// NOTE : see http://www.eclipse.org/Xtext/documentation.html#syntax
	//// NOTE : the order of terminal rules is crucial for your grammar, as they may shadow each other. This is especially important for newly introduced rules in connection with imported rules from used grammars. 
	//terminal OUT:
	//	"ECD" ("-r" | "+r") (("-" | "+") "2.0")? | "EWS" ("V" | "H") ("-" | "+") (INT+ ("." INT)?) | "EOG" ("i" | "r" (("-" |
	//	"+") "2.0")? | "o") | "EDC" ("-r" | "+r") (("-" | "+") "2.0")? | "NWP" (INT+ ("." INT)?);
	public TerminalRule getOUTRule() {
		return (tOUT != null) ? tOUT : (tOUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OUT"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal NUMBER returns ecore::EFloat:
	//	("+" | "-")? INT ("." INT?) (("E" | "e") ("+" | "-")? INT)? | ("+" | "-")? INT (("E" | "e") ("+" | "-")? INT) | ("."
	//	INT) (("E" | "e") ("+" | "-")? INT)? | "-" INT;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//// see http://www.cs.mtu.edu/~shene/COURSES/cs201/NOTES/chap05/format.html
	//terminal CLASS:
	//	"A" | "B" | "C";
	public TerminalRule getCLASSRule() {
		return (tCLASS != null) ? tCLASS : (tCLASS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLASS"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	////terminal SL_COMMENT	: '-' !('0'..'9') !('\r'|'\n'|'\r\n')*;
	////terminal SEC		: "!" !('\r'|'\n'|'\r\n')*;
	//terminal SL_COMMENT:
	//	"!" !("\r" | "\n" | "\r\n")*;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal NEWLINE:
	//	"\r" | "\n" | "\r\n";
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//Header hidden():
	//	row=SL_COMMENT NEWLINE;
	public HeaderElements getHeaderAccess() {
		return (pHeader != null) ? pHeader : (pHeader = new HeaderElements());
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}

	//Section hidden():
	//	name=SL_COMMENT NEWLINE;
	public SectionElements getSectionAccess() {
		return (pSection != null) ? pSection : (pSection = new SectionElements());
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}

	//siUnits hidden():
	//	WS? value=tBOOL WS SL_COMMENT? NEWLINE;
	public SiUnitsElements getSiUnitsAccess() {
		return (pSiUnits != null) ? pSiUnits : (pSiUnits = new SiUnitsElements());
	}
	
	public ParserRule getSiUnitsRule() {
		return getSiUnitsAccess().getRule();
	}

	//iStart hidden():
	//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
	public IStartElements getIStartAccess() {
		return (pIStart != null) ? pIStart : (pIStart = new IStartElements());
	}
	
	public ParserRule getIStartRule() {
		return getIStartAccess().getRule();
	}

	//iIECClass hidden():
	//	WS? value=INT WS SL_COMMENT? NEWLINE;
	public IIECClassElements getIIECClassAccess() {
		return (pIIECClass != null) ? pIIECClass : (pIIECClass = new IIECClassElements());
	}
	
	public ParserRule getIIECClassRule() {
		return getIIECClassAccess().getRule();
	}

	//sWindTurb hidden():
	//	WS? value=CLASS WS SL_COMMENT? NEWLINE;
	public SWindTurbElements getSWindTurbAccess() {
		return (pSWindTurb != null) ? pSWindTurb : (pSWindTurb = new SWindTurbElements());
	}
	
	public ParserRule getSWindTurbRule() {
		return getSWindTurbAccess().getRule();
	}

	//nWindSlope hidden():
	//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
	public NWindSlopeElements getNWindSlopeAccess() {
		return (pNWindSlope != null) ? pNWindSlope : (pNWindSlope = new NWindSlopeElements());
	}
	
	public ParserRule getNWindSlopeRule() {
		return getNWindSlopeAccess().getRule();
	}

	//iIECStd hidden():
	//	WS? value=INT WS SL_COMMENT? NEWLINE;
	public IIECStdElements getIIECStdAccess() {
		return (pIIECStd != null) ? pIIECStd : (pIIECStd = new IIECStdElements());
	}
	
	public ParserRule getIIECStdRule() {
		return getIIECStdAccess().getRule();
	}

	//nHubHeight hidden():
	//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
	public NHubHeightElements getNHubHeightAccess() {
		return (pNHubHeight != null) ? pNHubHeight : (pNHubHeight = new NHubHeightElements());
	}
	
	public ParserRule getNHubHeightRule() {
		return getNHubHeightAccess().getRule();
	}

	//nRotDiam hidden():
	//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
	public NRotDiamElements getNRotDiamAccess() {
		return (pNRotDiam != null) ? pNRotDiam : (pNRotDiam = new NRotDiamElements());
	}
	
	public ParserRule getNRotDiamRule() {
		return getNRotDiamAccess().getRule();
	}

	//nWindIn hidden():
	//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
	public NWindInElements getNWindInAccess() {
		return (pNWindIn != null) ? pNWindIn : (pNWindIn = new NWindInElements());
	}
	
	public ParserRule getNWindInRule() {
		return getNWindInAccess().getRule();
	}

	//nWindNom hidden():
	//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
	public NWindNomElements getNWindNomAccess() {
		return (pNWindNom != null) ? pNWindNom : (pNWindNom = new NWindNomElements());
	}
	
	public ParserRule getNWindNomRule() {
		return getNWindNomAccess().getRule();
	}

	//nWindOut hidden():
	//	WS? value=tNUMBER WS SL_COMMENT? NEWLINE;
	public NWindOutElements getNWindOutAccess() {
		return (pNWindOut != null) ? pNWindOut : (pNWindOut = new NWindOutElements());
	}
	
	public ParserRule getNWindOutRule() {
		return getNWindOutAccess().getRule();
	}

	//vOutList hidden():
	//	value=tARRAY_OUT;
	public VOutListElements getVOutListAccess() {
		return (pVOutList != null) ? pVOutList : (pVOutList = new VOutListElements());
	}
	
	public ParserRule getVOutListRule() {
		return getVOutListAccess().getRule();
	}
}
