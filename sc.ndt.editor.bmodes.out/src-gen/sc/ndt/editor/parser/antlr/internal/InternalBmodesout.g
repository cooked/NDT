/*
* generated by Xtext
*/
grammar InternalBmodesout;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package sc.ndt.editor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sc.ndt.editor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sc.ndt.editor.services.BmodesoutGrammarAccess;

}

@parser::members {

 	private BmodesoutGrammarAccess grammarAccess;
 	
    public InternalBmodesoutParser(TokenStream input, BmodesoutGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ModelBmodesout";	
   	}
   	
   	@Override
   	protected BmodesoutGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModelBmodesout
entryRuleModelBmodesout returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelBmodesoutRule()); }
	 iv_ruleModelBmodesout=ruleModelBmodesout 
	 { $current=$iv_ruleModelBmodesout.current; } 
	 EOF 
;

// Rule ModelBmodesout
ruleModelBmodesout returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelBmodesoutAccess().getHeadHeaderParserRuleCall_0_0()); 
	    }
		lv_Head_0_0=ruleHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelBmodesoutRule());
	        }
       		set(
       			$current, 
       			"Head",
        		lv_Head_0_0, 
        		"Header");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelBmodesoutAccess().getModesModeParserRuleCall_1_0()); 
	    }
		lv_Modes_1_0=ruleMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelBmodesoutRule());
	        }
       		add(
       			$current, 
       			"Modes",
        		lv_Modes_1_0, 
        		"Mode");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuletNUMBER
entryRuletNUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTNUMBERRule()); } 
	 iv_ruletNUMBER=ruletNUMBER 
	 { $current=$iv_ruletNUMBER.current.getText(); }  
	 EOF 
;

// Rule tNUMBER
ruletNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getTNUMBERAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_NUMBER_1=RULE_NUMBER    {
		$current.merge(this_NUMBER_1);
    }

    { 
    newLeafNode(this_NUMBER_1, grammarAccess.getTNUMBERAccess().getNUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleHeader
entryRuleHeader returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getHeaderRule()); }
	 iv_ruleHeader=ruleHeader 
	 { $current=$iv_ruleHeader.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Header
ruleHeader returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(	otherlv_0='Results generated by BModes (' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHeaderAccess().getResultsGeneratedByBModesKeyword_0());
    }
this_VER_1=RULE_VER
    { 
    newLeafNode(this_VER_1, grammarAccess.getHeaderAccess().getVERTerminalRuleCall_1()); 
    }
	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHeaderAccess().getCommaKeyword_2());
    }
this_DATE_3=RULE_DATE
    { 
    newLeafNode(this_DATE_3, grammarAccess.getHeaderAccess().getDATETerminalRuleCall_3()); 
    }
	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHeaderAccess().getCommaKeyword_4());
    }
	otherlv_5='compiled using double precision) on' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHeaderAccess().getCompiledUsingDoublePrecisionOnKeyword_5());
    }
this_DATE_6=RULE_DATE
    { 
    newLeafNode(this_DATE_6, grammarAccess.getHeaderAccess().getDATETerminalRuleCall_6()); 
    }
	otherlv_7='at' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHeaderAccess().getAtKeyword_7());
    }
this_TIME_8=RULE_TIME
    { 
    newLeafNode(this_TIME_8, grammarAccess.getHeaderAccess().getTIMETerminalRuleCall_8()); 
    }
	otherlv_9='.' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getHeaderAccess().getFullStopKeyword_9());
    }
this_NEWLINE_10=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_10, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_10()); 
    }
	otherlv_11='Sample non-uniform blade' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getHeaderAccess().getSampleNonUniformBladeKeyword_11());
    }
this_NEWLINE_12=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_12, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_12()); 
    }
(	otherlv_13='=' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getHeaderAccess().getEqualsSignKeyword_13());
    }
)+this_NEWLINE_14=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_14, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_14()); 
    }
this_NEWLINE_15=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_15, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_15()); 
    }
	otherlv_16='rotating blade frequencies & mode shapes' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getHeaderAccess().getRotatingBladeFrequenciesModeShapesKeyword_16());
    }
this_NEWLINE_17=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_17, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_17()); 
    }
	otherlv_18='--- only first' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getHeaderAccess().getOnlyFirstKeyword_18());
    }
(
(
		lv_n_19_0=RULE_INT
		{
			newLeafNode(lv_n_19_0, grammarAccess.getHeaderAccess().getNINTTerminalRuleCall_19_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHeaderRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_19_0, 
        		"INT");
	    }

)
)	otherlv_20='modes printed' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getHeaderAccess().getModesPrintedKeyword_20());
    }
this_NEWLINE_21=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_21, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_21()); 
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleMode
entryRuleMode returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getModeRule()); }
	 iv_ruleMode=ruleMode 
	 { $current=$iv_ruleMode.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Mode
ruleMode returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_0()); 
    }
this_NEWLINE_1=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_1, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_1()); 
    }
	otherlv_2=' -------- Mode No.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModeAccess().getModeNoKeyword_2());
    }
(
(
		lv_index_3_0=RULE_INT
		{
			newLeafNode(lv_index_3_0, grammarAccess.getModeAccess().getIndexINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"INT");
	    }

)
)	otherlv_4='(freq =' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModeAccess().getFreqKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModeAccess().getFreqTNUMBERParserRuleCall_5_0()); 
	    }
		lv_freq_5_0=ruletNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeRule());
	        }
       		set(
       			$current, 
       			"freq",
        		lv_freq_5_0, 
        		"tNUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='Hz)' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModeAccess().getHzKeyword_6());
    }
this_NEWLINE_7=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_7, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_7()); 
    }
this_NEWLINE_8=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_8, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_8()); 
    }
	otherlv_9='span_loc' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getModeAccess().getSpan_locKeyword_9());
    }
	otherlv_10='flap disp' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getModeAccess().getFlapDispKeyword_10());
    }
	otherlv_11='flap slope' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getModeAccess().getFlapSlopeKeyword_11());
    }
	otherlv_12='lag disp' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getModeAccess().getLagDispKeyword_12());
    }
	otherlv_13='lag slope' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getModeAccess().getLagSlopeKeyword_13());
    }
	otherlv_14='twist' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getModeAccess().getTwistKeyword_14());
    }
this_NEWLINE_15=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_15, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_15()); 
    }
this_NEWLINE_16=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_16, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_16()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getModeAccess().getSpan_locTNUMBERParserRuleCall_17_0_0()); 
	    }
		lv_span_loc_17_0=ruletNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeRule());
	        }
       		add(
       			$current, 
       			"span_loc",
        		lv_span_loc_17_0, 
        		"tNUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModeAccess().getFlap_dispTNUMBERParserRuleCall_17_1_0()); 
	    }
		lv_flap_disp_18_0=ruletNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeRule());
	        }
       		add(
       			$current, 
       			"flap_disp",
        		lv_flap_disp_18_0, 
        		"tNUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModeAccess().getFlap_slopeTNUMBERParserRuleCall_17_2_0()); 
	    }
		lv_flap_slope_19_0=ruletNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeRule());
	        }
       		add(
       			$current, 
       			"flap_slope",
        		lv_flap_slope_19_0, 
        		"tNUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModeAccess().getLag_dispTNUMBERParserRuleCall_17_3_0()); 
	    }
		lv_lag_disp_20_0=ruletNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeRule());
	        }
       		add(
       			$current, 
       			"lag_disp",
        		lv_lag_disp_20_0, 
        		"tNUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModeAccess().getLag_slopeTNUMBERParserRuleCall_17_4_0()); 
	    }
		lv_lag_slope_21_0=ruletNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeRule());
	        }
       		add(
       			$current, 
       			"lag_slope",
        		lv_lag_slope_21_0, 
        		"tNUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModeAccess().getTwistTNUMBERParserRuleCall_17_5_0()); 
	    }
		lv_twist_22_0=ruletNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeRule());
	        }
       		add(
       			$current, 
       			"twist",
        		lv_twist_22_0, 
        		"tNUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)this_NEWLINE_23=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_23, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_17_6()); 
    }
)+(	otherlv_24='=' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getModeAccess().getEqualsSignKeyword_18());
    }
)*(this_NEWLINE_25=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_25, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_19()); 
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





RULE_VER : 'v' RULE_INT '.' RULE_INT '.' RULE_INT;

RULE_DATE : RULE_INT '-' RULE_MONTH '-' RULE_INT;

RULE_TIME : RULE_INT ':' RULE_INT ':' RULE_INT;

RULE_INT : ('0'..'9')+;

RULE_NUMBER : (('+'|'-')? RULE_INT '.' RULE_INT? (('E'|'e') ('+'|'-')? RULE_INT)?|('+'|'-')? RULE_INT ('E'|'e') ('+'|'-')? RULE_INT|'.' RULE_INT (('E'|'e') ('+'|'-')? RULE_INT)?|'-' RULE_INT);

RULE_MONTH : 'A'..'Z' 'a'..'z' 'a'..'z';

RULE_WS : (' '|'\t')+;

RULE_NEWLINE : ('\r'|'\n'|'\r\n');


