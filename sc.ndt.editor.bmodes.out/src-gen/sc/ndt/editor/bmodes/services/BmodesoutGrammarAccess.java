/*
* generated by Xtext
*/
package sc.ndt.editor.bmodes.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class BmodesoutGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelBmodesoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelBmodesout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadHeaderParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cModesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModesModeParserRuleCall_1_0 = (RuleCall)cModesAssignment_1.eContents().get(0);
		
		////(WS|NEWLINE|SL_COMMENT)*
		//ModelBmodesout:
		//	Head=Header Modes+=Mode+;
		public ParserRule getRule() { return rule; }

		//Head=Header Modes+=Mode+
		public Group getGroup() { return cGroup; }

		//Head=Header
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//Header
		public RuleCall getHeadHeaderParserRuleCall_0_0() { return cHeadHeaderParserRuleCall_0_0; }

		//Modes+=Mode+
		public Assignment getModesAssignment_1() { return cModesAssignment_1; }

		//Mode
		public RuleCall getModesModeParserRuleCall_1_0() { return cModesModeParserRuleCall_1_0; }
	}

	public class TNUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tNUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//tNUMBER returns ecore::EFloat:
		//	INT | NUMBER;
		public ParserRule getRule() { return rule; }

		//INT | NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResultsGeneratedByBModesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDATETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCompiledUsingDoublePrecisionOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cDATETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cAtKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cTIMETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final RuleCall cNEWLINETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Keyword cSampleNonUniformBladeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cNEWLINETerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Keyword cEqualsSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final RuleCall cNEWLINETerminalRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final RuleCall cNEWLINETerminalRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		private final Keyword cRotatingBladeFrequenciesModeShapesKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final RuleCall cNEWLINETerminalRuleCall_17 = (RuleCall)cGroup.eContents().get(17);
		private final Keyword cOnlyFirstKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Assignment cNAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cNINTTerminalRuleCall_19_0 = (RuleCall)cNAssignment_19.eContents().get(0);
		private final Keyword cModesPrintedKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final RuleCall cNEWLINETerminalRuleCall_21 = (RuleCall)cGroup.eContents().get(21);
		
		////terminal COMM		: !('-'|'\r'|'\n'|'\r\n')*;
		//Header hidden(WS):
		//	"Results generated by BModes (" VER "," DATE "," "compiled using double precision) on" DATE "at" TIME "." NEWLINE
		//	"Sample non-uniform blade" NEWLINE "="+ NEWLINE NEWLINE "rotating blade frequencies & mode shapes" NEWLINE
		//	"--- only first" n=INT "modes printed" NEWLINE;
		public ParserRule getRule() { return rule; }

		//"Results generated by BModes (" VER "," DATE "," "compiled using double precision) on" DATE "at" TIME "." NEWLINE
		//"Sample non-uniform blade" NEWLINE "="+ NEWLINE NEWLINE "rotating blade frequencies & mode shapes" NEWLINE
		//"--- only first" n=INT "modes printed" NEWLINE
		public Group getGroup() { return cGroup; }

		//"Results generated by BModes ("
		public Keyword getResultsGeneratedByBModesKeyword_0() { return cResultsGeneratedByBModesKeyword_0; }

		//VER
		public RuleCall getVERTerminalRuleCall_1() { return cVERTerminalRuleCall_1; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//DATE
		public RuleCall getDATETerminalRuleCall_3() { return cDATETerminalRuleCall_3; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"compiled using double precision) on"
		public Keyword getCompiledUsingDoublePrecisionOnKeyword_5() { return cCompiledUsingDoublePrecisionOnKeyword_5; }

		//DATE
		public RuleCall getDATETerminalRuleCall_6() { return cDATETerminalRuleCall_6; }

		//"at"
		public Keyword getAtKeyword_7() { return cAtKeyword_7; }

		//TIME
		public RuleCall getTIMETerminalRuleCall_8() { return cTIMETerminalRuleCall_8; }

		//"."
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_10() { return cNEWLINETerminalRuleCall_10; }

		//"Sample non-uniform blade"
		public Keyword getSampleNonUniformBladeKeyword_11() { return cSampleNonUniformBladeKeyword_11; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_12() { return cNEWLINETerminalRuleCall_12; }

		//"="+
		public Keyword getEqualsSignKeyword_13() { return cEqualsSignKeyword_13; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_14() { return cNEWLINETerminalRuleCall_14; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_15() { return cNEWLINETerminalRuleCall_15; }

		//"rotating blade frequencies & mode shapes"
		public Keyword getRotatingBladeFrequenciesModeShapesKeyword_16() { return cRotatingBladeFrequenciesModeShapesKeyword_16; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_17() { return cNEWLINETerminalRuleCall_17; }

		//"--- only first"
		public Keyword getOnlyFirstKeyword_18() { return cOnlyFirstKeyword_18; }

		//n=INT
		public Assignment getNAssignment_19() { return cNAssignment_19; }

		//INT
		public RuleCall getNINTTerminalRuleCall_19_0() { return cNINTTerminalRuleCall_19_0; }

		//"modes printed"
		public Keyword getModesPrintedKeyword_20() { return cModesPrintedKeyword_20; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_21() { return cNEWLINETerminalRuleCall_21; }
	}

	public class ModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cModeNoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexINTTerminalRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cFreqKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFreqAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFreqTNUMBERParserRuleCall_5_0 = (RuleCall)cFreqAssignment_5.eContents().get(0);
		private final Keyword cHzKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cNEWLINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cNEWLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cSpan_locKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cFlapDispKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cFlapSlopeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLagDispKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLagSlopeKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cTwistKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final RuleCall cNEWLINETerminalRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		private final RuleCall cNEWLINETerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Assignment cSpan_locAssignment_17_0 = (Assignment)cGroup_17.eContents().get(0);
		private final RuleCall cSpan_locTNUMBERParserRuleCall_17_0_0 = (RuleCall)cSpan_locAssignment_17_0.eContents().get(0);
		private final Assignment cFlap_dispAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cFlap_dispTNUMBERParserRuleCall_17_1_0 = (RuleCall)cFlap_dispAssignment_17_1.eContents().get(0);
		private final Assignment cFlap_slopeAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cFlap_slopeTNUMBERParserRuleCall_17_2_0 = (RuleCall)cFlap_slopeAssignment_17_2.eContents().get(0);
		private final Assignment cLag_dispAssignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final RuleCall cLag_dispTNUMBERParserRuleCall_17_3_0 = (RuleCall)cLag_dispAssignment_17_3.eContents().get(0);
		private final Assignment cLag_slopeAssignment_17_4 = (Assignment)cGroup_17.eContents().get(4);
		private final RuleCall cLag_slopeTNUMBERParserRuleCall_17_4_0 = (RuleCall)cLag_slopeAssignment_17_4.eContents().get(0);
		private final Assignment cTwistAssignment_17_5 = (Assignment)cGroup_17.eContents().get(5);
		private final RuleCall cTwistTNUMBERParserRuleCall_17_5_0 = (RuleCall)cTwistAssignment_17_5.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_17_6 = (RuleCall)cGroup_17.eContents().get(6);
		private final Keyword cEqualsSignKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final RuleCall cNEWLINETerminalRuleCall_19 = (RuleCall)cGroup.eContents().get(19);
		
		//Mode hidden(WS):
		//	NEWLINE NEWLINE " -------- Mode No." index=INT "(freq =" freq=tNUMBER "Hz)" NEWLINE NEWLINE "span_loc" "flap disp"
		//	"flap slope" "lag disp" "lag slope" "twist" NEWLINE NEWLINE (span_loc+=tNUMBER flap_disp+=tNUMBER flap_slope+=tNUMBER
		//	lag_disp+=tNUMBER lag_slope+=tNUMBER twist+=tNUMBER NEWLINE)+ "="* NEWLINE?;
		public ParserRule getRule() { return rule; }

		//NEWLINE NEWLINE " -------- Mode No." index=INT "(freq =" freq=tNUMBER "Hz)" NEWLINE NEWLINE "span_loc" "flap disp"
		//"flap slope" "lag disp" "lag slope" "twist" NEWLINE NEWLINE (span_loc+=tNUMBER flap_disp+=tNUMBER flap_slope+=tNUMBER
		//lag_disp+=tNUMBER lag_slope+=tNUMBER twist+=tNUMBER NEWLINE)+ "="* NEWLINE?
		public Group getGroup() { return cGroup; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }

		//" -------- Mode No."
		public Keyword getModeNoKeyword_2() { return cModeNoKeyword_2; }

		//index=INT
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_3_0() { return cIndexINTTerminalRuleCall_3_0; }

		//"(freq ="
		public Keyword getFreqKeyword_4() { return cFreqKeyword_4; }

		//freq=tNUMBER
		public Assignment getFreqAssignment_5() { return cFreqAssignment_5; }

		//tNUMBER
		public RuleCall getFreqTNUMBERParserRuleCall_5_0() { return cFreqTNUMBERParserRuleCall_5_0; }

		//"Hz)"
		public Keyword getHzKeyword_6() { return cHzKeyword_6; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_7() { return cNEWLINETerminalRuleCall_7; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_8() { return cNEWLINETerminalRuleCall_8; }

		//"span_loc"
		public Keyword getSpan_locKeyword_9() { return cSpan_locKeyword_9; }

		//"flap disp"
		public Keyword getFlapDispKeyword_10() { return cFlapDispKeyword_10; }

		//"flap slope"
		public Keyword getFlapSlopeKeyword_11() { return cFlapSlopeKeyword_11; }

		//"lag disp"
		public Keyword getLagDispKeyword_12() { return cLagDispKeyword_12; }

		//"lag slope"
		public Keyword getLagSlopeKeyword_13() { return cLagSlopeKeyword_13; }

		//"twist"
		public Keyword getTwistKeyword_14() { return cTwistKeyword_14; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_15() { return cNEWLINETerminalRuleCall_15; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_16() { return cNEWLINETerminalRuleCall_16; }

		//(span_loc+=tNUMBER flap_disp+=tNUMBER flap_slope+=tNUMBER lag_disp+=tNUMBER lag_slope+=tNUMBER twist+=tNUMBER NEWLINE)+
		public Group getGroup_17() { return cGroup_17; }

		//span_loc+=tNUMBER
		public Assignment getSpan_locAssignment_17_0() { return cSpan_locAssignment_17_0; }

		//tNUMBER
		public RuleCall getSpan_locTNUMBERParserRuleCall_17_0_0() { return cSpan_locTNUMBERParserRuleCall_17_0_0; }

		//flap_disp+=tNUMBER
		public Assignment getFlap_dispAssignment_17_1() { return cFlap_dispAssignment_17_1; }

		//tNUMBER
		public RuleCall getFlap_dispTNUMBERParserRuleCall_17_1_0() { return cFlap_dispTNUMBERParserRuleCall_17_1_0; }

		//flap_slope+=tNUMBER
		public Assignment getFlap_slopeAssignment_17_2() { return cFlap_slopeAssignment_17_2; }

		//tNUMBER
		public RuleCall getFlap_slopeTNUMBERParserRuleCall_17_2_0() { return cFlap_slopeTNUMBERParserRuleCall_17_2_0; }

		//lag_disp+=tNUMBER
		public Assignment getLag_dispAssignment_17_3() { return cLag_dispAssignment_17_3; }

		//tNUMBER
		public RuleCall getLag_dispTNUMBERParserRuleCall_17_3_0() { return cLag_dispTNUMBERParserRuleCall_17_3_0; }

		//lag_slope+=tNUMBER
		public Assignment getLag_slopeAssignment_17_4() { return cLag_slopeAssignment_17_4; }

		//tNUMBER
		public RuleCall getLag_slopeTNUMBERParserRuleCall_17_4_0() { return cLag_slopeTNUMBERParserRuleCall_17_4_0; }

		//twist+=tNUMBER
		public Assignment getTwistAssignment_17_5() { return cTwistAssignment_17_5; }

		//tNUMBER
		public RuleCall getTwistTNUMBERParserRuleCall_17_5_0() { return cTwistTNUMBERParserRuleCall_17_5_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_17_6() { return cNEWLINETerminalRuleCall_17_6; }

		//"="*
		public Keyword getEqualsSignKeyword_18() { return cEqualsSignKeyword_18; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_19() { return cNEWLINETerminalRuleCall_19; }
	}
	
	
	private ModelBmodesoutElements pModelBmodesout;
	private TNUMBERElements pTNUMBER;
	private TerminalRule tVER;
	private TerminalRule tDATE;
	private TerminalRule tTIME;
	private TerminalRule tINT;
	private TerminalRule tNUMBER;
	private TerminalRule tMONTH;
	private TerminalRule tWS;
	private TerminalRule tNEWLINE;
	private HeaderElements pHeader;
	private ModeElements pMode;
	
	private final Grammar grammar;

	@Inject
	public BmodesoutGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sc.ndt.editor.bmodes.Bmodesout".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	////(WS|NEWLINE|SL_COMMENT)*
	//ModelBmodesout:
	//	Head=Header Modes+=Mode+;
	public ModelBmodesoutElements getModelBmodesoutAccess() {
		return (pModelBmodesout != null) ? pModelBmodesout : (pModelBmodesout = new ModelBmodesoutElements());
	}
	
	public ParserRule getModelBmodesoutRule() {
		return getModelBmodesoutAccess().getRule();
	}

	//tNUMBER returns ecore::EFloat:
	//	INT | NUMBER;
	public TNUMBERElements getTNUMBERAccess() {
		return (pTNUMBER != null) ? pTNUMBER : (pTNUMBER = new TNUMBERElements());
	}
	
	public ParserRule getTNUMBERRule() {
		return getTNUMBERAccess().getRule();
	}

	////from online help: The QualifiedName is a little special. It does not contain any assignments. 
	//// Therefore, it serves as a data type rule, which returns a String. So the feature name of a 
	//// Package is still of type String. 
	////FILE: ('.'?'.'?)('/'? STRING)*;
	////FILE returns ecore::EString:
	////	'"' ((('.'|'..')? '/')? (NAME '/')* NAME'.'NAME)? '"';
	////tARRAY_STR returns ecore::EString hidden(SL_COMMENT): (WS? STRING WS? NEWLINE )*;
	//// TERMINALS 
	//// NOTE : see http://www.eclipse.org/Xtext/documentation.html#syntax
	//// NOTE : the order of terminal rules is crucial for your grammar, as they may shadow each other. This is especially important for newly introduced rules in connection with imported rules from used grammars. 
	//terminal VER:
	//	"v" INT "." INT "." INT;
	public TerminalRule getVERRule() {
		return (tVER != null) ? tVER : (tVER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VER"));
	} 

	//terminal DATE:
	//	INT "-" MONTH "-" INT;
	public TerminalRule getDATERule() {
		return (tDATE != null) ? tDATE : (tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE"));
	} 

	//terminal TIME:
	//	INT ":" INT ":" INT;
	public TerminalRule getTIMERule() {
		return (tTIME != null) ? tTIME : (tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal NUMBER returns ecore::EFloat:
	//	("+" | "-")? INT ("." INT?) (("E" | "e") ("+" | "-")? INT)? | ("+" | "-")? INT (("E" | "e") ("+" | "-")? INT) | ("."
	//	INT) (("E" | "e") ("+" | "-")? INT)? | "-" INT;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal MONTH:
	//	"A".."Z" "a".."z" "a".."z";
	public TerminalRule getMONTHRule() {
		return (tMONTH != null) ? tMONTH : (tMONTH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MONTH"));
	} 

	////terminal STRING		: '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	////					  "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NEWLINE:
	//	"\r" | "\n" | "\r\n";
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	////terminal COMM		: !('-'|'\r'|'\n'|'\r\n')*;
	//Header hidden(WS):
	//	"Results generated by BModes (" VER "," DATE "," "compiled using double precision) on" DATE "at" TIME "." NEWLINE
	//	"Sample non-uniform blade" NEWLINE "="+ NEWLINE NEWLINE "rotating blade frequencies & mode shapes" NEWLINE
	//	"--- only first" n=INT "modes printed" NEWLINE;
	public HeaderElements getHeaderAccess() {
		return (pHeader != null) ? pHeader : (pHeader = new HeaderElements());
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}

	//Mode hidden(WS):
	//	NEWLINE NEWLINE " -------- Mode No." index=INT "(freq =" freq=tNUMBER "Hz)" NEWLINE NEWLINE "span_loc" "flap disp"
	//	"flap slope" "lag disp" "lag slope" "twist" NEWLINE NEWLINE (span_loc+=tNUMBER flap_disp+=tNUMBER flap_slope+=tNUMBER
	//	lag_disp+=tNUMBER lag_slope+=tNUMBER twist+=tNUMBER NEWLINE)+ "="* NEWLINE?;
	public ModeElements getModeAccess() {
		return (pMode != null) ? pMode : (pMode = new ModeElements());
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}
}
