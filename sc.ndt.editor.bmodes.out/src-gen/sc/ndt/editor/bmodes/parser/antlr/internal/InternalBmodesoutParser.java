package sc.ndt.editor.bmodes.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sc.ndt.editor.bmodes.services.BmodesoutGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings("all")
public class InternalBmodesoutParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "RULE_INT", "RULE_NUMBER", "RULE_VER", "RULE_DATE", "RULE_TIME", "RULE_NEWLINE", "RULE_MONTH", "RULE_WS", "'Results generated by BModes ('", "','", "'compiled using double precision) on'", "'at'", "'.'", "'Sample non-uniform blade'", "'='", "'rotating blade frequencies & mode shapes'", "'--- only first'", "'modes printed'", "' -------- Mode No.'", "'(freq ='", "'Hz)'", "'span_loc'", "'flap disp'", "'flap slope'", "'lag disp'", "'lag slope'", "'twist'"
    };
    public static final int RULE_NEWLINE=9;
    public static final int RULE_DATE=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int RULE_MONTH=10;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int EOF=-1;
    public static final int T__30=30;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int RULE_NUMBER=5;
    public static final int T__12=12;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int RULE_TIME=8;
    public static final int RULE_VER=6;
    public static final int RULE_INT=4;
    public static final int RULE_WS=11;

    // delegates
    // delegators


        public InternalBmodesoutParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalBmodesoutParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalBmodesoutParser.tokenNames; }
    public String getGrammarFileName() { return "../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g"; }



     	private BmodesoutGrammarAccess grammarAccess;
     	
        public InternalBmodesoutParser(TokenStream input, BmodesoutGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }
        
        @Override
        protected String getFirstRuleName() {
        	return "ModelBmodesout";	
       	}
       	
       	@Override
       	protected BmodesoutGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}



    // $ANTLR start "entryRuleModelBmodesout"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:67:1: entryRuleModelBmodesout returns [EObject current=null] : iv_ruleModelBmodesout= ruleModelBmodesout EOF ;
    public final EObject entryRuleModelBmodesout() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleModelBmodesout = null;


        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:68:2: (iv_ruleModelBmodesout= ruleModelBmodesout EOF )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:69:2: iv_ruleModelBmodesout= ruleModelBmodesout EOF
            {
             newCompositeNode(grammarAccess.getModelBmodesoutRule()); 
            pushFollow(FOLLOW_ruleModelBmodesout_in_entryRuleModelBmodesout75);
            iv_ruleModelBmodesout=ruleModelBmodesout();

            state._fsp--;

             current =iv_ruleModelBmodesout; 
            match(input,EOF,FOLLOW_EOF_in_entryRuleModelBmodesout85); 

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleModelBmodesout"


    // $ANTLR start "ruleModelBmodesout"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:76:1: ruleModelBmodesout returns [EObject current=null] : ( ( (lv_Head_0_0= ruleHeader ) ) ( (lv_Modes_1_0= ruleMode ) )+ ) ;
    public final EObject ruleModelBmodesout() throws RecognitionException {
        EObject current = null;

        EObject lv_Head_0_0 = null;

        EObject lv_Modes_1_0 = null;


         enterRule(); 
            
        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:79:28: ( ( ( (lv_Head_0_0= ruleHeader ) ) ( (lv_Modes_1_0= ruleMode ) )+ ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:80:1: ( ( (lv_Head_0_0= ruleHeader ) ) ( (lv_Modes_1_0= ruleMode ) )+ )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:80:1: ( ( (lv_Head_0_0= ruleHeader ) ) ( (lv_Modes_1_0= ruleMode ) )+ )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:80:2: ( (lv_Head_0_0= ruleHeader ) ) ( (lv_Modes_1_0= ruleMode ) )+
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:80:2: ( (lv_Head_0_0= ruleHeader ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:81:1: (lv_Head_0_0= ruleHeader )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:81:1: (lv_Head_0_0= ruleHeader )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:82:3: lv_Head_0_0= ruleHeader
            {
             
            	        newCompositeNode(grammarAccess.getModelBmodesoutAccess().getHeadHeaderParserRuleCall_0_0()); 
            	    
            pushFollow(FOLLOW_ruleHeader_in_ruleModelBmodesout131);
            lv_Head_0_0=ruleHeader();

            state._fsp--;


            	        if (current==null) {
            	            current = createModelElementForParent(grammarAccess.getModelBmodesoutRule());
            	        }
                   		set(
                   			current, 
                   			"Head",
                    		lv_Head_0_0, 
                    		"Header");
            	        afterParserOrEnumRuleCall();
            	    

            }


            }

            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:98:2: ( (lv_Modes_1_0= ruleMode ) )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==RULE_NEWLINE) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:99:1: (lv_Modes_1_0= ruleMode )
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:99:1: (lv_Modes_1_0= ruleMode )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:100:3: lv_Modes_1_0= ruleMode
            	    {
            	     
            	    	        newCompositeNode(grammarAccess.getModelBmodesoutAccess().getModesModeParserRuleCall_1_0()); 
            	    	    
            	    pushFollow(FOLLOW_ruleMode_in_ruleModelBmodesout152);
            	    lv_Modes_1_0=ruleMode();

            	    state._fsp--;


            	    	        if (current==null) {
            	    	            current = createModelElementForParent(grammarAccess.getModelBmodesoutRule());
            	    	        }
            	           		add(
            	           			current, 
            	           			"Modes",
            	            		lv_Modes_1_0, 
            	            		"Mode");
            	    	        afterParserOrEnumRuleCall();
            	    	    

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }


            }

             leaveRule(); 
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleModelBmodesout"


    // $ANTLR start "entryRuletNUMBER"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:124:1: entryRuletNUMBER returns [String current=null] : iv_ruletNUMBER= ruletNUMBER EOF ;
    public final String entryRuletNUMBER() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruletNUMBER = null;


        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:125:2: (iv_ruletNUMBER= ruletNUMBER EOF )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:126:2: iv_ruletNUMBER= ruletNUMBER EOF
            {
             newCompositeNode(grammarAccess.getTNUMBERRule()); 
            pushFollow(FOLLOW_ruletNUMBER_in_entryRuletNUMBER190);
            iv_ruletNUMBER=ruletNUMBER();

            state._fsp--;

             current =iv_ruletNUMBER.getText(); 
            match(input,EOF,FOLLOW_EOF_in_entryRuletNUMBER201); 

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuletNUMBER"


    // $ANTLR start "ruletNUMBER"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:133:1: ruletNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT | this_NUMBER_1= RULE_NUMBER ) ;
    public final AntlrDatatypeRuleToken ruletNUMBER() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token this_NUMBER_1=null;

         enterRule(); 
            
        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:136:28: ( (this_INT_0= RULE_INT | this_NUMBER_1= RULE_NUMBER ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:137:1: (this_INT_0= RULE_INT | this_NUMBER_1= RULE_NUMBER )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:137:1: (this_INT_0= RULE_INT | this_NUMBER_1= RULE_NUMBER )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==RULE_INT) ) {
                alt2=1;
            }
            else if ( (LA2_0==RULE_NUMBER) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:137:6: this_INT_0= RULE_INT
                    {
                    this_INT_0=(Token)match(input,RULE_INT,FOLLOW_RULE_INT_in_ruletNUMBER241); 

                    		current.merge(this_INT_0);
                        
                     
                        newLeafNode(this_INT_0, grammarAccess.getTNUMBERAccess().getINTTerminalRuleCall_0()); 
                        

                    }
                    break;
                case 2 :
                    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:145:10: this_NUMBER_1= RULE_NUMBER
                    {
                    this_NUMBER_1=(Token)match(input,RULE_NUMBER,FOLLOW_RULE_NUMBER_in_ruletNUMBER267); 

                    		current.merge(this_NUMBER_1);
                        
                     
                        newLeafNode(this_NUMBER_1, grammarAccess.getTNUMBERAccess().getNUMBERTerminalRuleCall_1()); 
                        

                    }
                    break;

            }


            }

             leaveRule(); 
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruletNUMBER"


    // $ANTLR start "entryRuleHeader"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:160:1: entryRuleHeader returns [EObject current=null] : iv_ruleHeader= ruleHeader EOF ;
    public final EObject entryRuleHeader() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHeader = null;


         
        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
        	
        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:164:2: (iv_ruleHeader= ruleHeader EOF )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:165:2: iv_ruleHeader= ruleHeader EOF
            {
             newCompositeNode(grammarAccess.getHeaderRule()); 
            pushFollow(FOLLOW_ruleHeader_in_entryRuleHeader318);
            iv_ruleHeader=ruleHeader();

            state._fsp--;

             current =iv_ruleHeader; 
            match(input,EOF,FOLLOW_EOF_in_entryRuleHeader328); 

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleHeader"


    // $ANTLR start "ruleHeader"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:175:1: ruleHeader returns [EObject current=null] : (otherlv_0= 'Results generated by BModes (' this_VER_1= RULE_VER otherlv_2= ',' this_DATE_3= RULE_DATE otherlv_4= ',' otherlv_5= 'compiled using double precision) on' this_DATE_6= RULE_DATE otherlv_7= 'at' this_TIME_8= RULE_TIME otherlv_9= '.' this_NEWLINE_10= RULE_NEWLINE otherlv_11= 'Sample non-uniform blade' this_NEWLINE_12= RULE_NEWLINE (otherlv_13= '=' )+ this_NEWLINE_14= RULE_NEWLINE this_NEWLINE_15= RULE_NEWLINE otherlv_16= 'rotating blade frequencies & mode shapes' this_NEWLINE_17= RULE_NEWLINE otherlv_18= '--- only first' ( (lv_n_19_0= RULE_INT ) ) otherlv_20= 'modes printed' this_NEWLINE_21= RULE_NEWLINE ) ;
    public final EObject ruleHeader() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token this_VER_1=null;
        Token otherlv_2=null;
        Token this_DATE_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token this_DATE_6=null;
        Token otherlv_7=null;
        Token this_TIME_8=null;
        Token otherlv_9=null;
        Token this_NEWLINE_10=null;
        Token otherlv_11=null;
        Token this_NEWLINE_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_14=null;
        Token this_NEWLINE_15=null;
        Token otherlv_16=null;
        Token this_NEWLINE_17=null;
        Token otherlv_18=null;
        Token lv_n_19_0=null;
        Token otherlv_20=null;
        Token this_NEWLINE_21=null;

         enterRule(); 
        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
            
        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:179:28: ( (otherlv_0= 'Results generated by BModes (' this_VER_1= RULE_VER otherlv_2= ',' this_DATE_3= RULE_DATE otherlv_4= ',' otherlv_5= 'compiled using double precision) on' this_DATE_6= RULE_DATE otherlv_7= 'at' this_TIME_8= RULE_TIME otherlv_9= '.' this_NEWLINE_10= RULE_NEWLINE otherlv_11= 'Sample non-uniform blade' this_NEWLINE_12= RULE_NEWLINE (otherlv_13= '=' )+ this_NEWLINE_14= RULE_NEWLINE this_NEWLINE_15= RULE_NEWLINE otherlv_16= 'rotating blade frequencies & mode shapes' this_NEWLINE_17= RULE_NEWLINE otherlv_18= '--- only first' ( (lv_n_19_0= RULE_INT ) ) otherlv_20= 'modes printed' this_NEWLINE_21= RULE_NEWLINE ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:180:1: (otherlv_0= 'Results generated by BModes (' this_VER_1= RULE_VER otherlv_2= ',' this_DATE_3= RULE_DATE otherlv_4= ',' otherlv_5= 'compiled using double precision) on' this_DATE_6= RULE_DATE otherlv_7= 'at' this_TIME_8= RULE_TIME otherlv_9= '.' this_NEWLINE_10= RULE_NEWLINE otherlv_11= 'Sample non-uniform blade' this_NEWLINE_12= RULE_NEWLINE (otherlv_13= '=' )+ this_NEWLINE_14= RULE_NEWLINE this_NEWLINE_15= RULE_NEWLINE otherlv_16= 'rotating blade frequencies & mode shapes' this_NEWLINE_17= RULE_NEWLINE otherlv_18= '--- only first' ( (lv_n_19_0= RULE_INT ) ) otherlv_20= 'modes printed' this_NEWLINE_21= RULE_NEWLINE )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:180:1: (otherlv_0= 'Results generated by BModes (' this_VER_1= RULE_VER otherlv_2= ',' this_DATE_3= RULE_DATE otherlv_4= ',' otherlv_5= 'compiled using double precision) on' this_DATE_6= RULE_DATE otherlv_7= 'at' this_TIME_8= RULE_TIME otherlv_9= '.' this_NEWLINE_10= RULE_NEWLINE otherlv_11= 'Sample non-uniform blade' this_NEWLINE_12= RULE_NEWLINE (otherlv_13= '=' )+ this_NEWLINE_14= RULE_NEWLINE this_NEWLINE_15= RULE_NEWLINE otherlv_16= 'rotating blade frequencies & mode shapes' this_NEWLINE_17= RULE_NEWLINE otherlv_18= '--- only first' ( (lv_n_19_0= RULE_INT ) ) otherlv_20= 'modes printed' this_NEWLINE_21= RULE_NEWLINE )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:180:3: otherlv_0= 'Results generated by BModes (' this_VER_1= RULE_VER otherlv_2= ',' this_DATE_3= RULE_DATE otherlv_4= ',' otherlv_5= 'compiled using double precision) on' this_DATE_6= RULE_DATE otherlv_7= 'at' this_TIME_8= RULE_TIME otherlv_9= '.' this_NEWLINE_10= RULE_NEWLINE otherlv_11= 'Sample non-uniform blade' this_NEWLINE_12= RULE_NEWLINE (otherlv_13= '=' )+ this_NEWLINE_14= RULE_NEWLINE this_NEWLINE_15= RULE_NEWLINE otherlv_16= 'rotating blade frequencies & mode shapes' this_NEWLINE_17= RULE_NEWLINE otherlv_18= '--- only first' ( (lv_n_19_0= RULE_INT ) ) otherlv_20= 'modes printed' this_NEWLINE_21= RULE_NEWLINE
            {
            otherlv_0=(Token)match(input,12,FOLLOW_12_in_ruleHeader369); 

                	newLeafNode(otherlv_0, grammarAccess.getHeaderAccess().getResultsGeneratedByBModesKeyword_0());
                
            this_VER_1=(Token)match(input,RULE_VER,FOLLOW_RULE_VER_in_ruleHeader380); 
             
                newLeafNode(this_VER_1, grammarAccess.getHeaderAccess().getVERTerminalRuleCall_1()); 
                
            otherlv_2=(Token)match(input,13,FOLLOW_13_in_ruleHeader391); 

                	newLeafNode(otherlv_2, grammarAccess.getHeaderAccess().getCommaKeyword_2());
                
            this_DATE_3=(Token)match(input,RULE_DATE,FOLLOW_RULE_DATE_in_ruleHeader402); 
             
                newLeafNode(this_DATE_3, grammarAccess.getHeaderAccess().getDATETerminalRuleCall_3()); 
                
            otherlv_4=(Token)match(input,13,FOLLOW_13_in_ruleHeader413); 

                	newLeafNode(otherlv_4, grammarAccess.getHeaderAccess().getCommaKeyword_4());
                
            otherlv_5=(Token)match(input,14,FOLLOW_14_in_ruleHeader425); 

                	newLeafNode(otherlv_5, grammarAccess.getHeaderAccess().getCompiledUsingDoublePrecisionOnKeyword_5());
                
            this_DATE_6=(Token)match(input,RULE_DATE,FOLLOW_RULE_DATE_in_ruleHeader436); 
             
                newLeafNode(this_DATE_6, grammarAccess.getHeaderAccess().getDATETerminalRuleCall_6()); 
                
            otherlv_7=(Token)match(input,15,FOLLOW_15_in_ruleHeader447); 

                	newLeafNode(otherlv_7, grammarAccess.getHeaderAccess().getAtKeyword_7());
                
            this_TIME_8=(Token)match(input,RULE_TIME,FOLLOW_RULE_TIME_in_ruleHeader458); 
             
                newLeafNode(this_TIME_8, grammarAccess.getHeaderAccess().getTIMETerminalRuleCall_8()); 
                
            otherlv_9=(Token)match(input,16,FOLLOW_16_in_ruleHeader469); 

                	newLeafNode(otherlv_9, grammarAccess.getHeaderAccess().getFullStopKeyword_9());
                
            this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleHeader480); 
             
                newLeafNode(this_NEWLINE_10, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_10()); 
                
            otherlv_11=(Token)match(input,17,FOLLOW_17_in_ruleHeader491); 

                	newLeafNode(otherlv_11, grammarAccess.getHeaderAccess().getSampleNonUniformBladeKeyword_11());
                
            this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleHeader502); 
             
                newLeafNode(this_NEWLINE_12, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_12()); 
                
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:232:1: (otherlv_13= '=' )+
            int cnt3=0;
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==18) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:232:3: otherlv_13= '='
            	    {
            	    otherlv_13=(Token)match(input,18,FOLLOW_18_in_ruleHeader514); 

            	        	newLeafNode(otherlv_13, grammarAccess.getHeaderAccess().getEqualsSignKeyword_13());
            	        

            	    }
            	    break;

            	default :
            	    if ( cnt3 >= 1 ) break loop3;
                        EarlyExitException eee =
                            new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);

            this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleHeader527); 
             
                newLeafNode(this_NEWLINE_14, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_14()); 
                
            this_NEWLINE_15=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleHeader537); 
             
                newLeafNode(this_NEWLINE_15, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_15()); 
                
            otherlv_16=(Token)match(input,19,FOLLOW_19_in_ruleHeader548); 

                	newLeafNode(otherlv_16, grammarAccess.getHeaderAccess().getRotatingBladeFrequenciesModeShapesKeyword_16());
                
            this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleHeader559); 
             
                newLeafNode(this_NEWLINE_17, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_17()); 
                
            otherlv_18=(Token)match(input,20,FOLLOW_20_in_ruleHeader570); 

                	newLeafNode(otherlv_18, grammarAccess.getHeaderAccess().getOnlyFirstKeyword_18());
                
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:256:1: ( (lv_n_19_0= RULE_INT ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:257:1: (lv_n_19_0= RULE_INT )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:257:1: (lv_n_19_0= RULE_INT )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:258:3: lv_n_19_0= RULE_INT
            {
            lv_n_19_0=(Token)match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleHeader587); 

            			newLeafNode(lv_n_19_0, grammarAccess.getHeaderAccess().getNINTTerminalRuleCall_19_0()); 
            		

            	        if (current==null) {
            	            current = createModelElement(grammarAccess.getHeaderRule());
            	        }
                   		setWithLastConsumed(
                   			current, 
                   			"n",
                    		lv_n_19_0, 
                    		"INT");
            	    

            }


            }

            otherlv_20=(Token)match(input,21,FOLLOW_21_in_ruleHeader604); 

                	newLeafNode(otherlv_20, grammarAccess.getHeaderAccess().getModesPrintedKeyword_20());
                
            this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleHeader615); 
             
                newLeafNode(this_NEWLINE_21, grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_21()); 
                

            }


            }

             leaveRule(); 
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleHeader"


    // $ANTLR start "entryRuleMode"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:293:1: entryRuleMode returns [EObject current=null] : iv_ruleMode= ruleMode EOF ;
    public final EObject entryRuleMode() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMode = null;


         
        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
        	
        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:297:2: (iv_ruleMode= ruleMode EOF )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:298:2: iv_ruleMode= ruleMode EOF
            {
             newCompositeNode(grammarAccess.getModeRule()); 
            pushFollow(FOLLOW_ruleMode_in_entryRuleMode660);
            iv_ruleMode=ruleMode();

            state._fsp--;

             current =iv_ruleMode; 
            match(input,EOF,FOLLOW_EOF_in_entryRuleMode670); 

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleMode"


    // $ANTLR start "ruleMode"
    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:308:1: ruleMode returns [EObject current=null] : (this_NEWLINE_0= RULE_NEWLINE this_NEWLINE_1= RULE_NEWLINE otherlv_2= ' -------- Mode No.' ( (lv_index_3_0= RULE_INT ) ) otherlv_4= '(freq =' ( (lv_freq_5_0= ruletNUMBER ) ) otherlv_6= 'Hz)' this_NEWLINE_7= RULE_NEWLINE this_NEWLINE_8= RULE_NEWLINE otherlv_9= 'span_loc' otherlv_10= 'flap disp' otherlv_11= 'flap slope' otherlv_12= 'lag disp' otherlv_13= 'lag slope' otherlv_14= 'twist' this_NEWLINE_15= RULE_NEWLINE this_NEWLINE_16= RULE_NEWLINE ( ( (lv_span_loc_17_0= ruletNUMBER ) ) ( (lv_flap_disp_18_0= ruletNUMBER ) ) ( (lv_flap_slope_19_0= ruletNUMBER ) ) ( (lv_lag_disp_20_0= ruletNUMBER ) ) ( (lv_lag_slope_21_0= ruletNUMBER ) ) ( (lv_twist_22_0= ruletNUMBER ) ) this_NEWLINE_23= RULE_NEWLINE )+ (otherlv_24= '=' )* (this_NEWLINE_25= RULE_NEWLINE )? ) ;
    public final EObject ruleMode() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_0=null;
        Token this_NEWLINE_1=null;
        Token otherlv_2=null;
        Token lv_index_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token this_NEWLINE_7=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token this_NEWLINE_15=null;
        Token this_NEWLINE_16=null;
        Token this_NEWLINE_23=null;
        Token otherlv_24=null;
        Token this_NEWLINE_25=null;
        AntlrDatatypeRuleToken lv_freq_5_0 = null;

        AntlrDatatypeRuleToken lv_span_loc_17_0 = null;

        AntlrDatatypeRuleToken lv_flap_disp_18_0 = null;

        AntlrDatatypeRuleToken lv_flap_slope_19_0 = null;

        AntlrDatatypeRuleToken lv_lag_disp_20_0 = null;

        AntlrDatatypeRuleToken lv_lag_slope_21_0 = null;

        AntlrDatatypeRuleToken lv_twist_22_0 = null;


         enterRule(); 
        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
            
        try {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:312:28: ( (this_NEWLINE_0= RULE_NEWLINE this_NEWLINE_1= RULE_NEWLINE otherlv_2= ' -------- Mode No.' ( (lv_index_3_0= RULE_INT ) ) otherlv_4= '(freq =' ( (lv_freq_5_0= ruletNUMBER ) ) otherlv_6= 'Hz)' this_NEWLINE_7= RULE_NEWLINE this_NEWLINE_8= RULE_NEWLINE otherlv_9= 'span_loc' otherlv_10= 'flap disp' otherlv_11= 'flap slope' otherlv_12= 'lag disp' otherlv_13= 'lag slope' otherlv_14= 'twist' this_NEWLINE_15= RULE_NEWLINE this_NEWLINE_16= RULE_NEWLINE ( ( (lv_span_loc_17_0= ruletNUMBER ) ) ( (lv_flap_disp_18_0= ruletNUMBER ) ) ( (lv_flap_slope_19_0= ruletNUMBER ) ) ( (lv_lag_disp_20_0= ruletNUMBER ) ) ( (lv_lag_slope_21_0= ruletNUMBER ) ) ( (lv_twist_22_0= ruletNUMBER ) ) this_NEWLINE_23= RULE_NEWLINE )+ (otherlv_24= '=' )* (this_NEWLINE_25= RULE_NEWLINE )? ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:313:1: (this_NEWLINE_0= RULE_NEWLINE this_NEWLINE_1= RULE_NEWLINE otherlv_2= ' -------- Mode No.' ( (lv_index_3_0= RULE_INT ) ) otherlv_4= '(freq =' ( (lv_freq_5_0= ruletNUMBER ) ) otherlv_6= 'Hz)' this_NEWLINE_7= RULE_NEWLINE this_NEWLINE_8= RULE_NEWLINE otherlv_9= 'span_loc' otherlv_10= 'flap disp' otherlv_11= 'flap slope' otherlv_12= 'lag disp' otherlv_13= 'lag slope' otherlv_14= 'twist' this_NEWLINE_15= RULE_NEWLINE this_NEWLINE_16= RULE_NEWLINE ( ( (lv_span_loc_17_0= ruletNUMBER ) ) ( (lv_flap_disp_18_0= ruletNUMBER ) ) ( (lv_flap_slope_19_0= ruletNUMBER ) ) ( (lv_lag_disp_20_0= ruletNUMBER ) ) ( (lv_lag_slope_21_0= ruletNUMBER ) ) ( (lv_twist_22_0= ruletNUMBER ) ) this_NEWLINE_23= RULE_NEWLINE )+ (otherlv_24= '=' )* (this_NEWLINE_25= RULE_NEWLINE )? )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:313:1: (this_NEWLINE_0= RULE_NEWLINE this_NEWLINE_1= RULE_NEWLINE otherlv_2= ' -------- Mode No.' ( (lv_index_3_0= RULE_INT ) ) otherlv_4= '(freq =' ( (lv_freq_5_0= ruletNUMBER ) ) otherlv_6= 'Hz)' this_NEWLINE_7= RULE_NEWLINE this_NEWLINE_8= RULE_NEWLINE otherlv_9= 'span_loc' otherlv_10= 'flap disp' otherlv_11= 'flap slope' otherlv_12= 'lag disp' otherlv_13= 'lag slope' otherlv_14= 'twist' this_NEWLINE_15= RULE_NEWLINE this_NEWLINE_16= RULE_NEWLINE ( ( (lv_span_loc_17_0= ruletNUMBER ) ) ( (lv_flap_disp_18_0= ruletNUMBER ) ) ( (lv_flap_slope_19_0= ruletNUMBER ) ) ( (lv_lag_disp_20_0= ruletNUMBER ) ) ( (lv_lag_slope_21_0= ruletNUMBER ) ) ( (lv_twist_22_0= ruletNUMBER ) ) this_NEWLINE_23= RULE_NEWLINE )+ (otherlv_24= '=' )* (this_NEWLINE_25= RULE_NEWLINE )? )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:313:2: this_NEWLINE_0= RULE_NEWLINE this_NEWLINE_1= RULE_NEWLINE otherlv_2= ' -------- Mode No.' ( (lv_index_3_0= RULE_INT ) ) otherlv_4= '(freq =' ( (lv_freq_5_0= ruletNUMBER ) ) otherlv_6= 'Hz)' this_NEWLINE_7= RULE_NEWLINE this_NEWLINE_8= RULE_NEWLINE otherlv_9= 'span_loc' otherlv_10= 'flap disp' otherlv_11= 'flap slope' otherlv_12= 'lag disp' otherlv_13= 'lag slope' otherlv_14= 'twist' this_NEWLINE_15= RULE_NEWLINE this_NEWLINE_16= RULE_NEWLINE ( ( (lv_span_loc_17_0= ruletNUMBER ) ) ( (lv_flap_disp_18_0= ruletNUMBER ) ) ( (lv_flap_slope_19_0= ruletNUMBER ) ) ( (lv_lag_disp_20_0= ruletNUMBER ) ) ( (lv_lag_slope_21_0= ruletNUMBER ) ) ( (lv_twist_22_0= ruletNUMBER ) ) this_NEWLINE_23= RULE_NEWLINE )+ (otherlv_24= '=' )* (this_NEWLINE_25= RULE_NEWLINE )?
            {
            this_NEWLINE_0=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode710); 
             
                newLeafNode(this_NEWLINE_0, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_0()); 
                
            this_NEWLINE_1=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode720); 
             
                newLeafNode(this_NEWLINE_1, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_1()); 
                
            otherlv_2=(Token)match(input,22,FOLLOW_22_in_ruleMode731); 

                	newLeafNode(otherlv_2, grammarAccess.getModeAccess().getModeNoKeyword_2());
                
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:325:1: ( (lv_index_3_0= RULE_INT ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:326:1: (lv_index_3_0= RULE_INT )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:326:1: (lv_index_3_0= RULE_INT )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:327:3: lv_index_3_0= RULE_INT
            {
            lv_index_3_0=(Token)match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleMode748); 

            			newLeafNode(lv_index_3_0, grammarAccess.getModeAccess().getIndexINTTerminalRuleCall_3_0()); 
            		

            	        if (current==null) {
            	            current = createModelElement(grammarAccess.getModeRule());
            	        }
                   		setWithLastConsumed(
                   			current, 
                   			"index",
                    		lv_index_3_0, 
                    		"INT");
            	    

            }


            }

            otherlv_4=(Token)match(input,23,FOLLOW_23_in_ruleMode765); 

                	newLeafNode(otherlv_4, grammarAccess.getModeAccess().getFreqKeyword_4());
                
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:347:1: ( (lv_freq_5_0= ruletNUMBER ) )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:348:1: (lv_freq_5_0= ruletNUMBER )
            {
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:348:1: (lv_freq_5_0= ruletNUMBER )
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:349:3: lv_freq_5_0= ruletNUMBER
            {
             
            	        newCompositeNode(grammarAccess.getModeAccess().getFreqTNUMBERParserRuleCall_5_0()); 
            	    
            pushFollow(FOLLOW_ruletNUMBER_in_ruleMode786);
            lv_freq_5_0=ruletNUMBER();

            state._fsp--;


            	        if (current==null) {
            	            current = createModelElementForParent(grammarAccess.getModeRule());
            	        }
                   		set(
                   			current, 
                   			"freq",
                    		lv_freq_5_0, 
                    		"tNUMBER");
            	        afterParserOrEnumRuleCall();
            	    

            }


            }

            otherlv_6=(Token)match(input,24,FOLLOW_24_in_ruleMode798); 

                	newLeafNode(otherlv_6, grammarAccess.getModeAccess().getHzKeyword_6());
                
            this_NEWLINE_7=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode809); 
             
                newLeafNode(this_NEWLINE_7, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_7()); 
                
            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode819); 
             
                newLeafNode(this_NEWLINE_8, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_8()); 
                
            otherlv_9=(Token)match(input,25,FOLLOW_25_in_ruleMode830); 

                	newLeafNode(otherlv_9, grammarAccess.getModeAccess().getSpan_locKeyword_9());
                
            otherlv_10=(Token)match(input,26,FOLLOW_26_in_ruleMode842); 

                	newLeafNode(otherlv_10, grammarAccess.getModeAccess().getFlapDispKeyword_10());
                
            otherlv_11=(Token)match(input,27,FOLLOW_27_in_ruleMode854); 

                	newLeafNode(otherlv_11, grammarAccess.getModeAccess().getFlapSlopeKeyword_11());
                
            otherlv_12=(Token)match(input,28,FOLLOW_28_in_ruleMode866); 

                	newLeafNode(otherlv_12, grammarAccess.getModeAccess().getLagDispKeyword_12());
                
            otherlv_13=(Token)match(input,29,FOLLOW_29_in_ruleMode878); 

                	newLeafNode(otherlv_13, grammarAccess.getModeAccess().getLagSlopeKeyword_13());
                
            otherlv_14=(Token)match(input,30,FOLLOW_30_in_ruleMode890); 

                	newLeafNode(otherlv_14, grammarAccess.getModeAccess().getTwistKeyword_14());
                
            this_NEWLINE_15=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode901); 
             
                newLeafNode(this_NEWLINE_15, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_15()); 
                
            this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode911); 
             
                newLeafNode(this_NEWLINE_16, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_16()); 
                
            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:409:1: ( ( (lv_span_loc_17_0= ruletNUMBER ) ) ( (lv_flap_disp_18_0= ruletNUMBER ) ) ( (lv_flap_slope_19_0= ruletNUMBER ) ) ( (lv_lag_disp_20_0= ruletNUMBER ) ) ( (lv_lag_slope_21_0= ruletNUMBER ) ) ( (lv_twist_22_0= ruletNUMBER ) ) this_NEWLINE_23= RULE_NEWLINE )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( ((LA4_0>=RULE_INT && LA4_0<=RULE_NUMBER)) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:409:2: ( (lv_span_loc_17_0= ruletNUMBER ) ) ( (lv_flap_disp_18_0= ruletNUMBER ) ) ( (lv_flap_slope_19_0= ruletNUMBER ) ) ( (lv_lag_disp_20_0= ruletNUMBER ) ) ( (lv_lag_slope_21_0= ruletNUMBER ) ) ( (lv_twist_22_0= ruletNUMBER ) ) this_NEWLINE_23= RULE_NEWLINE
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:409:2: ( (lv_span_loc_17_0= ruletNUMBER ) )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:410:1: (lv_span_loc_17_0= ruletNUMBER )
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:410:1: (lv_span_loc_17_0= ruletNUMBER )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:411:3: lv_span_loc_17_0= ruletNUMBER
            	    {
            	     
            	    	        newCompositeNode(grammarAccess.getModeAccess().getSpan_locTNUMBERParserRuleCall_17_0_0()); 
            	    	    
            	    pushFollow(FOLLOW_ruletNUMBER_in_ruleMode932);
            	    lv_span_loc_17_0=ruletNUMBER();

            	    state._fsp--;


            	    	        if (current==null) {
            	    	            current = createModelElementForParent(grammarAccess.getModeRule());
            	    	        }
            	           		add(
            	           			current, 
            	           			"span_loc",
            	            		lv_span_loc_17_0, 
            	            		"tNUMBER");
            	    	        afterParserOrEnumRuleCall();
            	    	    

            	    }


            	    }

            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:427:2: ( (lv_flap_disp_18_0= ruletNUMBER ) )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:428:1: (lv_flap_disp_18_0= ruletNUMBER )
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:428:1: (lv_flap_disp_18_0= ruletNUMBER )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:429:3: lv_flap_disp_18_0= ruletNUMBER
            	    {
            	     
            	    	        newCompositeNode(grammarAccess.getModeAccess().getFlap_dispTNUMBERParserRuleCall_17_1_0()); 
            	    	    
            	    pushFollow(FOLLOW_ruletNUMBER_in_ruleMode953);
            	    lv_flap_disp_18_0=ruletNUMBER();

            	    state._fsp--;


            	    	        if (current==null) {
            	    	            current = createModelElementForParent(grammarAccess.getModeRule());
            	    	        }
            	           		add(
            	           			current, 
            	           			"flap_disp",
            	            		lv_flap_disp_18_0, 
            	            		"tNUMBER");
            	    	        afterParserOrEnumRuleCall();
            	    	    

            	    }


            	    }

            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:445:2: ( (lv_flap_slope_19_0= ruletNUMBER ) )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:446:1: (lv_flap_slope_19_0= ruletNUMBER )
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:446:1: (lv_flap_slope_19_0= ruletNUMBER )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:447:3: lv_flap_slope_19_0= ruletNUMBER
            	    {
            	     
            	    	        newCompositeNode(grammarAccess.getModeAccess().getFlap_slopeTNUMBERParserRuleCall_17_2_0()); 
            	    	    
            	    pushFollow(FOLLOW_ruletNUMBER_in_ruleMode974);
            	    lv_flap_slope_19_0=ruletNUMBER();

            	    state._fsp--;


            	    	        if (current==null) {
            	    	            current = createModelElementForParent(grammarAccess.getModeRule());
            	    	        }
            	           		add(
            	           			current, 
            	           			"flap_slope",
            	            		lv_flap_slope_19_0, 
            	            		"tNUMBER");
            	    	        afterParserOrEnumRuleCall();
            	    	    

            	    }


            	    }

            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:463:2: ( (lv_lag_disp_20_0= ruletNUMBER ) )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:464:1: (lv_lag_disp_20_0= ruletNUMBER )
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:464:1: (lv_lag_disp_20_0= ruletNUMBER )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:465:3: lv_lag_disp_20_0= ruletNUMBER
            	    {
            	     
            	    	        newCompositeNode(grammarAccess.getModeAccess().getLag_dispTNUMBERParserRuleCall_17_3_0()); 
            	    	    
            	    pushFollow(FOLLOW_ruletNUMBER_in_ruleMode995);
            	    lv_lag_disp_20_0=ruletNUMBER();

            	    state._fsp--;


            	    	        if (current==null) {
            	    	            current = createModelElementForParent(grammarAccess.getModeRule());
            	    	        }
            	           		add(
            	           			current, 
            	           			"lag_disp",
            	            		lv_lag_disp_20_0, 
            	            		"tNUMBER");
            	    	        afterParserOrEnumRuleCall();
            	    	    

            	    }


            	    }

            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:481:2: ( (lv_lag_slope_21_0= ruletNUMBER ) )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:482:1: (lv_lag_slope_21_0= ruletNUMBER )
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:482:1: (lv_lag_slope_21_0= ruletNUMBER )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:483:3: lv_lag_slope_21_0= ruletNUMBER
            	    {
            	     
            	    	        newCompositeNode(grammarAccess.getModeAccess().getLag_slopeTNUMBERParserRuleCall_17_4_0()); 
            	    	    
            	    pushFollow(FOLLOW_ruletNUMBER_in_ruleMode1016);
            	    lv_lag_slope_21_0=ruletNUMBER();

            	    state._fsp--;


            	    	        if (current==null) {
            	    	            current = createModelElementForParent(grammarAccess.getModeRule());
            	    	        }
            	           		add(
            	           			current, 
            	           			"lag_slope",
            	            		lv_lag_slope_21_0, 
            	            		"tNUMBER");
            	    	        afterParserOrEnumRuleCall();
            	    	    

            	    }


            	    }

            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:499:2: ( (lv_twist_22_0= ruletNUMBER ) )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:500:1: (lv_twist_22_0= ruletNUMBER )
            	    {
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:500:1: (lv_twist_22_0= ruletNUMBER )
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:501:3: lv_twist_22_0= ruletNUMBER
            	    {
            	     
            	    	        newCompositeNode(grammarAccess.getModeAccess().getTwistTNUMBERParserRuleCall_17_5_0()); 
            	    	    
            	    pushFollow(FOLLOW_ruletNUMBER_in_ruleMode1037);
            	    lv_twist_22_0=ruletNUMBER();

            	    state._fsp--;


            	    	        if (current==null) {
            	    	            current = createModelElementForParent(grammarAccess.getModeRule());
            	    	        }
            	           		add(
            	           			current, 
            	           			"twist",
            	            		lv_twist_22_0, 
            	            		"tNUMBER");
            	    	        afterParserOrEnumRuleCall();
            	    	    

            	    }


            	    }

            	    this_NEWLINE_23=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode1048); 
            	     
            	        newLeafNode(this_NEWLINE_23, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_17_6()); 
            	        

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:521:3: (otherlv_24= '=' )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==18) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:521:5: otherlv_24= '='
            	    {
            	    otherlv_24=(Token)match(input,18,FOLLOW_18_in_ruleMode1062); 

            	        	newLeafNode(otherlv_24, grammarAccess.getModeAccess().getEqualsSignKeyword_18());
            	        

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:525:3: (this_NEWLINE_25= RULE_NEWLINE )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==RULE_NEWLINE) ) {
                int LA6_1 = input.LA(2);

                if ( (LA6_1==EOF) ) {
                    alt6=1;
                }
                else if ( (LA6_1==RULE_NEWLINE) ) {
                    int LA6_4 = input.LA(3);

                    if ( (LA6_4==RULE_NEWLINE) ) {
                        alt6=1;
                    }
                }
            }
            switch (alt6) {
                case 1 :
                    // ../sc.ndt.editor.bmodes.out/src-gen/sc/ndt/editor/bmodes/parser/antlr/internal/InternalBmodesout.g:525:4: this_NEWLINE_25= RULE_NEWLINE
                    {
                    this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_RULE_NEWLINE_in_ruleMode1076); 
                     
                        newLeafNode(this_NEWLINE_25, grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_19()); 
                        

                    }
                    break;

            }


            }


            }

             leaveRule(); 
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleMode"

    // Delegated rules


 

    public static final BitSet FOLLOW_ruleModelBmodesout_in_entryRuleModelBmodesout75 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleModelBmodesout85 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleHeader_in_ruleModelBmodesout131 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_ruleMode_in_ruleModelBmodesout152 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_ruletNUMBER_in_entryRuletNUMBER190 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuletNUMBER201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_ruletNUMBER241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_NUMBER_in_ruletNUMBER267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleHeader_in_entryRuleHeader318 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleHeader328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_ruleHeader369 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_VER_in_ruleHeader380 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleHeader391 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_DATE_in_ruleHeader402 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleHeader413 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14_in_ruleHeader425 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_DATE_in_ruleHeader436 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_15_in_ruleHeader447 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_TIME_in_ruleHeader458 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_16_in_ruleHeader469 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleHeader480 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_ruleHeader491 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleHeader502 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_ruleHeader514 = new BitSet(new long[]{0x0000000000040200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleHeader527 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleHeader537 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_ruleHeader548 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleHeader559 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_ruleHeader570 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleHeader587 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_21_in_ruleHeader604 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleHeader615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMode_in_entryRuleMode660 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMode670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode710 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode720 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_ruleMode731 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleMode748 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_ruleMode765 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_ruletNUMBER_in_ruleMode786 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_24_in_ruleMode798 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode809 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode819 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleMode830 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_ruleMode842 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleMode854 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_ruleMode866 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_ruleMode878 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_ruleMode890 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode901 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode911 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_ruletNUMBER_in_ruleMode932 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_ruletNUMBER_in_ruleMode953 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_ruletNUMBER_in_ruleMode974 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_ruletNUMBER_in_ruleMode995 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_ruletNUMBER_in_ruleMode1016 = new BitSet(new long[]{0x0000000000000030L});
    public static final BitSet FOLLOW_ruletNUMBER_in_ruleMode1037 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode1048 = new BitSet(new long[]{0x0000000000040232L});
    public static final BitSet FOLLOW_18_in_ruleMode1062 = new BitSet(new long[]{0x0000000000040202L});
    public static final BitSet FOLLOW_RULE_NEWLINE_in_ruleMode1076 = new BitSet(new long[]{0x0000000000000002L});

}