/*
* generated by Xtext
*/
grammar InternalBmodesout;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package sc.ndt.editor.bmodes.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package sc.ndt.editor.bmodes.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import sc.ndt.editor.bmodes.services.BmodesoutGrammarAccess;

}

@parser::members {
 
 	private BmodesoutGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BmodesoutGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModelBmodesout
entryRuleModelBmodesout 
:
{ before(grammarAccess.getModelBmodesoutRule()); }
	 ruleModelBmodesout
{ after(grammarAccess.getModelBmodesoutRule()); } 
	 EOF 
;

// Rule ModelBmodesout
ruleModelBmodesout
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelBmodesoutAccess().getGroup()); }
(rule__ModelBmodesout__Group__0)
{ after(grammarAccess.getModelBmodesoutAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletNUMBER
entryRuletNUMBER 
:
{ before(grammarAccess.getTNUMBERRule()); }
	 ruletNUMBER
{ after(grammarAccess.getTNUMBERRule()); } 
	 EOF 
;

// Rule tNUMBER
ruletNUMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTNUMBERAccess().getAlternatives()); }
(rule__TNUMBER__Alternatives)
{ after(grammarAccess.getTNUMBERAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHeader
entryRuleHeader 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getHeaderRule()); }
	 ruleHeader
{ after(grammarAccess.getHeaderRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Header
ruleHeader
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHeaderAccess().getGroup()); }
(rule__Header__Group__0)
{ after(grammarAccess.getHeaderAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleMode
entryRuleMode 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getModeRule()); }
	 ruleMode
{ after(grammarAccess.getModeRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Mode
ruleMode
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModeAccess().getGroup()); }
(rule__Mode__Group__0)
{ after(grammarAccess.getModeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__TNUMBER__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTNUMBERAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getTNUMBERAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTNUMBERAccess().getNUMBERTerminalRuleCall_1()); }
	RULE_NUMBER
{ after(grammarAccess.getTNUMBERAccess().getNUMBERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ModelBmodesout__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelBmodesout__Group__0__Impl
	rule__ModelBmodesout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelBmodesout__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelBmodesoutAccess().getHeadAssignment_0()); }
(rule__ModelBmodesout__HeadAssignment_0)
{ after(grammarAccess.getModelBmodesoutAccess().getHeadAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelBmodesout__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelBmodesout__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelBmodesout__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelBmodesoutAccess().getModesAssignment_1()); }
(rule__ModelBmodesout__ModesAssignment_1)
{ after(grammarAccess.getModelBmodesoutAccess().getModesAssignment_1()); }
)
(
{ before(grammarAccess.getModelBmodesoutAccess().getModesAssignment_1()); }
(rule__ModelBmodesout__ModesAssignment_1)*
{ after(grammarAccess.getModelBmodesoutAccess().getModesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Header__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__0__Impl
	rule__Header__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getResultsGeneratedByBModesKeyword_0()); }

	'Results generated by BModes (' 

{ after(grammarAccess.getHeaderAccess().getResultsGeneratedByBModesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__1__Impl
	rule__Header__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getVERTerminalRuleCall_1()); }
	RULE_VER
{ after(grammarAccess.getHeaderAccess().getVERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__2__Impl
	rule__Header__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getHeaderAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__3__Impl
	rule__Header__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getDATETerminalRuleCall_3()); }
	RULE_DATE
{ after(grammarAccess.getHeaderAccess().getDATETerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__4__Impl
	rule__Header__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getHeaderAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__5__Impl
	rule__Header__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getCompiledUsingDoublePrecisionOnKeyword_5()); }

	'compiled using double precision) on' 

{ after(grammarAccess.getHeaderAccess().getCompiledUsingDoublePrecisionOnKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__6__Impl
	rule__Header__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getDATETerminalRuleCall_6()); }
	RULE_DATE
{ after(grammarAccess.getHeaderAccess().getDATETerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__7__Impl
	rule__Header__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getAtKeyword_7()); }

	'at' 

{ after(grammarAccess.getHeaderAccess().getAtKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__8__Impl
	rule__Header__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getTIMETerminalRuleCall_8()); }
	RULE_TIME
{ after(grammarAccess.getHeaderAccess().getTIMETerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__9__Impl
	rule__Header__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getFullStopKeyword_9()); }

	'.' 

{ after(grammarAccess.getHeaderAccess().getFullStopKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__10__Impl
	rule__Header__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_10()); }
	RULE_NEWLINE
{ after(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__11__Impl
	rule__Header__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getSampleNonUniformBladeKeyword_11()); }

	'Sample non-uniform blade' 

{ after(grammarAccess.getHeaderAccess().getSampleNonUniformBladeKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__12__Impl
	rule__Header__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_12()); }
	RULE_NEWLINE
{ after(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__13__Impl
	rule__Header__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getHeaderAccess().getEqualsSignKeyword_13()); }
(
	'=' 
)
{ after(grammarAccess.getHeaderAccess().getEqualsSignKeyword_13()); }
)
(
{ before(grammarAccess.getHeaderAccess().getEqualsSignKeyword_13()); }
(
	'=' 
)*
{ after(grammarAccess.getHeaderAccess().getEqualsSignKeyword_13()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__14__Impl
	rule__Header__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_14()); }
	RULE_NEWLINE
{ after(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__15__Impl
	rule__Header__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_15()); }
	RULE_NEWLINE
{ after(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__16__Impl
	rule__Header__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getRotatingBladeFrequenciesModeShapesKeyword_16()); }

	'rotating blade frequencies & mode shapes' 

{ after(grammarAccess.getHeaderAccess().getRotatingBladeFrequenciesModeShapesKeyword_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__17
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__17__Impl
	rule__Header__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__17__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_17()); }
	RULE_NEWLINE
{ after(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_17()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__18
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__18__Impl
	rule__Header__Group__19
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__18__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getOnlyFirstKeyword_18()); }

	'--- only first' 

{ after(grammarAccess.getHeaderAccess().getOnlyFirstKeyword_18()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__19
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__19__Impl
	rule__Header__Group__20
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__19__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNAssignment_19()); }
(rule__Header__NAssignment_19)
{ after(grammarAccess.getHeaderAccess().getNAssignment_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__20
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__20__Impl
	rule__Header__Group__21
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__20__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getModesPrintedKeyword_20()); }

	'modes printed' 

{ after(grammarAccess.getHeaderAccess().getModesPrintedKeyword_20()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Header__Group__21
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Header__Group__21__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Group__21__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_21()); }
	RULE_NEWLINE
{ after(grammarAccess.getHeaderAccess().getNEWLINETerminalRuleCall_21()); }
)

;
finally {
	restoreStackSize(stackSize);
}














































rule__Mode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__0__Impl
	rule__Mode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_0()); }
	RULE_NEWLINE
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__1__Impl
	rule__Mode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_1()); }
	RULE_NEWLINE
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__2__Impl
	rule__Mode__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getModeNoKeyword_2()); }

	' -------- Mode No.' 

{ after(grammarAccess.getModeAccess().getModeNoKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__3__Impl
	rule__Mode__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getIndexAssignment_3()); }
(rule__Mode__IndexAssignment_3)
{ after(grammarAccess.getModeAccess().getIndexAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__4__Impl
	rule__Mode__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFreqKeyword_4()); }

	'(freq =' 

{ after(grammarAccess.getModeAccess().getFreqKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__5__Impl
	rule__Mode__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFreqAssignment_5()); }
(rule__Mode__FreqAssignment_5)
{ after(grammarAccess.getModeAccess().getFreqAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__6__Impl
	rule__Mode__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getHzKeyword_6()); }

	'Hz)' 

{ after(grammarAccess.getModeAccess().getHzKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__7__Impl
	rule__Mode__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_7()); }
	RULE_NEWLINE
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__8__Impl
	rule__Mode__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_8()); }
	RULE_NEWLINE
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__9__Impl
	rule__Mode__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getSpan_locKeyword_9()); }

	'span_loc' 

{ after(grammarAccess.getModeAccess().getSpan_locKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__10__Impl
	rule__Mode__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFlapDispKeyword_10()); }

	'flap disp' 

{ after(grammarAccess.getModeAccess().getFlapDispKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__11__Impl
	rule__Mode__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFlapSlopeKeyword_11()); }

	'flap slope' 

{ after(grammarAccess.getModeAccess().getFlapSlopeKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__12__Impl
	rule__Mode__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getLagDispKeyword_12()); }

	'lag disp' 

{ after(grammarAccess.getModeAccess().getLagDispKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__13__Impl
	rule__Mode__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getLagSlopeKeyword_13()); }

	'lag slope' 

{ after(grammarAccess.getModeAccess().getLagSlopeKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__14__Impl
	rule__Mode__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getTwistKeyword_14()); }

	'twist' 

{ after(grammarAccess.getModeAccess().getTwistKeyword_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__15__Impl
	rule__Mode__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_15()); }
	RULE_NEWLINE
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__16__Impl
	rule__Mode__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_16()); }
	RULE_NEWLINE
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__17
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__17__Impl
	rule__Mode__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__17__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModeAccess().getGroup_17()); }
(rule__Mode__Group_17__0)
{ after(grammarAccess.getModeAccess().getGroup_17()); }
)
(
{ before(grammarAccess.getModeAccess().getGroup_17()); }
(rule__Mode__Group_17__0)*
{ after(grammarAccess.getModeAccess().getGroup_17()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__18
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__18__Impl
	rule__Mode__Group__19
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__18__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getEqualsSignKeyword_18()); }
(
	'=' 
)*
{ after(grammarAccess.getModeAccess().getEqualsSignKeyword_18()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group__19
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group__19__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group__19__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_19()); }
(	RULE_NEWLINE)?
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}










































rule__Mode__Group_17__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group_17__0__Impl
	rule__Mode__Group_17__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group_17__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getSpan_locAssignment_17_0()); }
(rule__Mode__Span_locAssignment_17_0)
{ after(grammarAccess.getModeAccess().getSpan_locAssignment_17_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group_17__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group_17__1__Impl
	rule__Mode__Group_17__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group_17__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFlap_dispAssignment_17_1()); }
(rule__Mode__Flap_dispAssignment_17_1)
{ after(grammarAccess.getModeAccess().getFlap_dispAssignment_17_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group_17__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group_17__2__Impl
	rule__Mode__Group_17__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group_17__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFlap_slopeAssignment_17_2()); }
(rule__Mode__Flap_slopeAssignment_17_2)
{ after(grammarAccess.getModeAccess().getFlap_slopeAssignment_17_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group_17__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group_17__3__Impl
	rule__Mode__Group_17__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group_17__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getLag_dispAssignment_17_3()); }
(rule__Mode__Lag_dispAssignment_17_3)
{ after(grammarAccess.getModeAccess().getLag_dispAssignment_17_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group_17__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group_17__4__Impl
	rule__Mode__Group_17__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group_17__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getLag_slopeAssignment_17_4()); }
(rule__Mode__Lag_slopeAssignment_17_4)
{ after(grammarAccess.getModeAccess().getLag_slopeAssignment_17_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group_17__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group_17__5__Impl
	rule__Mode__Group_17__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group_17__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getTwistAssignment_17_5()); }
(rule__Mode__TwistAssignment_17_5)
{ after(grammarAccess.getModeAccess().getTwistAssignment_17_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mode__Group_17__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mode__Group_17__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Group_17__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_17_6()); }
	RULE_NEWLINE
{ after(grammarAccess.getModeAccess().getNEWLINETerminalRuleCall_17_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

















rule__ModelBmodesout__HeadAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelBmodesoutAccess().getHeadHeaderParserRuleCall_0_0()); }
	ruleHeader{ after(grammarAccess.getModelBmodesoutAccess().getHeadHeaderParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelBmodesout__ModesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelBmodesoutAccess().getModesModeParserRuleCall_1_0()); }
	ruleMode{ after(grammarAccess.getModelBmodesoutAccess().getModesModeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Header__NAssignment_19
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeaderAccess().getNINTTerminalRuleCall_19_0()); }
	RULE_INT{ after(grammarAccess.getHeaderAccess().getNINTTerminalRuleCall_19_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__IndexAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getIndexINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getModeAccess().getIndexINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__FreqAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFreqTNUMBERParserRuleCall_5_0()); }
	ruletNUMBER{ after(grammarAccess.getModeAccess().getFreqTNUMBERParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Span_locAssignment_17_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getSpan_locTNUMBERParserRuleCall_17_0_0()); }
	ruletNUMBER{ after(grammarAccess.getModeAccess().getSpan_locTNUMBERParserRuleCall_17_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Flap_dispAssignment_17_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFlap_dispTNUMBERParserRuleCall_17_1_0()); }
	ruletNUMBER{ after(grammarAccess.getModeAccess().getFlap_dispTNUMBERParserRuleCall_17_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Flap_slopeAssignment_17_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getFlap_slopeTNUMBERParserRuleCall_17_2_0()); }
	ruletNUMBER{ after(grammarAccess.getModeAccess().getFlap_slopeTNUMBERParserRuleCall_17_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Lag_dispAssignment_17_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getLag_dispTNUMBERParserRuleCall_17_3_0()); }
	ruletNUMBER{ after(grammarAccess.getModeAccess().getLag_dispTNUMBERParserRuleCall_17_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Lag_slopeAssignment_17_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getLag_slopeTNUMBERParserRuleCall_17_4_0()); }
	ruletNUMBER{ after(grammarAccess.getModeAccess().getLag_slopeTNUMBERParserRuleCall_17_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__TwistAssignment_17_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getTwistTNUMBERParserRuleCall_17_5_0()); }
	ruletNUMBER{ after(grammarAccess.getModeAccess().getTwistTNUMBERParserRuleCall_17_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VER : 'v' RULE_INT '.' RULE_INT '.' RULE_INT;

RULE_DATE : RULE_INT '-' RULE_MONTH '-' RULE_INT;

RULE_TIME : RULE_INT ':' RULE_INT ':' RULE_INT;

RULE_INT : ('0'..'9')+;

RULE_NUMBER : (('+'|'-')? RULE_INT '.' RULE_INT? (('E'|'e') ('+'|'-')? RULE_INT)?|('+'|'-')? RULE_INT ('E'|'e') ('+'|'-')? RULE_INT|'.' RULE_INT (('E'|'e') ('+'|'-')? RULE_INT)?|'-' RULE_INT);

RULE_MONTH : 'A'..'Z' 'a'..'z' 'a'..'z';

RULE_WS : (' '|'\t')+;

RULE_NEWLINE : ('\r'|'\n'|'\r\n');


