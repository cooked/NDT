/*
* generated by Xtext
*/
package sc.ndt.editor.fast.ui.addon.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import sc.ndt.editor.fast.fastfst.bEcho;
import sc.ndt.editor.fast.ui.contentassist.AbstractFastfstProposalProvider;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class FastfstProposalProvider extends AbstractFastfstProposalProvider {
	
	// SC reference
	// auto-activation, http://christiandietrich.wordpress.com/2011/09/19/xtext-content-assist-auto-activation/
	
	public void completeBEcho_Name(bEcho model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
		super.completeBEcho_Name(model, assignment, context, acceptor);
		 
		// compute the plain proposal
		String proposal = model.eClass().getName();
		 
		// Create and register the completion proposal:
		// The proposal may be null as the createCompletionProposal(..)
		// methods check for valid prefixes and terminal token conflicts.
		// The acceptor handles null-values gracefully.
		acceptor.accept(createCompletionProposal(proposal, context));
	}
	@Override
	public void completeBEcho_Value(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// call implementation of superclass
				super.completeBEcho_Value(model, assignment, context, acceptor);
				 
				// compute the plain proposal
				String proposal = "TRUE";
				 
				// Create and register the completion proposal:
				// The proposal may be null as the createCompletionProposal(..)
				// methods check for valid prefixes and terminal token conflicts.
				// The acceptor handles null-values gracefully.
				acceptor.accept(createCompletionProposal(proposal, context));
	}
	
	
}
